// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2025/6/5 ¤W¤È 11:45:52 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Common Files\System\ado\msador15.dll (1)
// LIBID: {00000300-0000-0010-8000-00AA006D2EA4}
// LCID: 0
// Helpfile: C:\Program Files\Common Files\System\ado\ado270.chm
// HelpString: Microsoft ActiveX Data Objects Recordset 2.8 Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// Parent TypeLibrary:
//   (0) v1.0 EmulatorService, (C:\src\devpro_emulator_service\BSP-2025\EmulatorService\EmulatorService.tlb)
// ************************************************************************ //
#ifndef   ADOR_TLBH
#define   ADOR_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Ador_tlb
{

// *********************************************************************//
// HelpString: Microsoft ActiveX Data Objects Recordset 2.8 Library
// Version:    2.8
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_ADOR = {0x00000300, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_CursorTypeEnum = {0x0000051B, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_CursorOptionEnum = {0x0000051C, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_LockTypeEnum = {0x0000051D, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ExecuteOptionEnum = {0x0000051E, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ConnectOptionEnum = {0x00000541, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ObjectStateEnum = {0x00000532, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_CursorLocationEnum = {0x0000052F, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_DataTypeEnum = {0x0000051F, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_FieldAttributeEnum = {0x00000525, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_EditModeEnum = {0x00000526, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_RecordStatusEnum = {0x00000527, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_GetRowsOptionEnum = {0x00000542, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_PositionEnum = {0x00000528, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_PositionEnum_Param = {0xA56187C5, 0xD690, 0x4037,{ 0xAE, 0x32, 0xA0,0x0E, 0xDC, 0x37,0x6A, 0xC3} };
extern "C" const __declspec(selectany) GUID GUID_BookmarkEnum = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_MarshalOptionsEnum = {0x00000540, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_AffectEnum = {0x00000543, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ResyncEnum = {0x00000544, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_CompareEnum = {0x00000545, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_FilterGroupEnum = {0x00000546, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_SearchDirectionEnum = {0x00000547, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_SearchDirection = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_PersistFormatEnum = {0x00000548, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_StringFormatEnum = {0x00000549, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_SeekEnum = {0x00000552, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ADCPROP_UPDATECRITERIA_ENUM = {0x0000054A, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ADCPROP_ASYNCTHREADPRIORITY_ENUM = {0x0000054B, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ADCPROP_AUTORECALC_ENUM = {0x00000554, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ADCPROP_UPDATERESYNC_ENUM = {0x00000553, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_MoveRecordOptionsEnum = {0x00000573, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_CopyRecordOptionsEnum = {0x00000574, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_StreamTypeEnum = {0x00000576, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_LineSeparatorEnum = {0x00000577, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_StreamOpenOptionsEnum = {0x0000057A, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_StreamWriteEnum = {0x0000057B, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_SaveOptionsEnum = {0x0000057C, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_FieldEnum = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_StreamReadEnum = {0x00000000, 0x0000, 0x0000,{ 0x00, 0x00, 0x00,0x00, 0x00, 0x00,0x00, 0x00} };
extern "C" const __declspec(selectany) GUID GUID_RecordTypeEnum = {0x0000057D, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID__Collection = {0x00000512, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID__DynaCollection = {0x00000513, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID__ADO = {0x00000534, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Properties = {0x00000504, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Property = {0x00000503, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Recordset15 = {0x0000050E, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID CLSID_Recordset = {0x00000535, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Recordset20 = {0x0000054F, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Recordset21 = {0x00000555, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID__Recordset = {0x00000556, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Fields15 = {0x00000506, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Fields20 = {0x0000054D, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Fields = {0x00000564, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Field20 = {0x0000054C, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Field = {0x00000569, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID GUID_ADO_LONGPTR = {0x54D8B4B9, 0x663B, 0x4A9C,{ 0x95, 0xF6, 0x0E,0x74, 0x9A, 0xBD,0x70, 0xF1} };
extern "C" const __declspec(selectany) GUID IID_ADORecordsetConstruction = {0x00000283, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };
extern "C" const __declspec(selectany) GUID IID_Field15 = {0x00000505, 0x0000, 0x0010,{ 0x80, 0x00, 0x00,0xAA, 0x00, 0x6D,0x2E, 0xA4} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      CursorTypeEnum;
enum      CursorOptionEnum;
enum      LockTypeEnum;
enum      ExecuteOptionEnum;
enum      ConnectOptionEnum;
enum      ObjectStateEnum;
enum      CursorLocationEnum;
enum      DataTypeEnum;
enum      FieldAttributeEnum;
enum      EditModeEnum;
enum      RecordStatusEnum;
enum      GetRowsOptionEnum;
enum      PositionEnum;
enum      BookmarkEnum;
enum      MarshalOptionsEnum;
enum      AffectEnum;
enum      ResyncEnum;
enum      CompareEnum;
enum      FilterGroupEnum;
enum      SearchDirectionEnum;
enum      PersistFormatEnum;
enum      StringFormatEnum;
enum      SeekEnum;
enum      ADCPROP_UPDATECRITERIA_ENUM;
enum      ADCPROP_ASYNCTHREADPRIORITY_ENUM;
enum      ADCPROP_AUTORECALC_ENUM;
enum      ADCPROP_UPDATERESYNC_ENUM;
enum      MoveRecordOptionsEnum;
enum      CopyRecordOptionsEnum;
enum      StreamTypeEnum;
enum      LineSeparatorEnum;
enum      StreamOpenOptionsEnum;
enum      StreamWriteEnum;
enum      SaveOptionsEnum;
enum      FieldEnum;
enum      StreamReadEnum;
enum      RecordTypeEnum;
interface DECLSPEC_UUID("{00000512-0000-0010-8000-00AA006D2EA4}") _Collection;
typedef TComInterface<_Collection, &IID__Collection> _CollectionPtr;

interface DECLSPEC_UUID("{00000513-0000-0010-8000-00AA006D2EA4}") _DynaCollection;
typedef TComInterface<_DynaCollection, &IID__DynaCollection> _DynaCollectionPtr;

interface DECLSPEC_UUID("{00000534-0000-0010-8000-00AA006D2EA4}") _ADO;
typedef TComInterface<_ADO, &IID__ADO> _ADOPtr;

interface DECLSPEC_UUID("{00000504-0000-0010-8000-00AA006D2EA4}") Properties;
typedef TComInterface<Properties, &IID_Properties> PropertiesPtr;

interface DECLSPEC_UUID("{00000503-0000-0010-8000-00AA006D2EA4}") Property;
typedef TComInterface<Property, &IID_Property> PropertyPtr;

interface DECLSPEC_UUID("{0000050E-0000-0010-8000-00AA006D2EA4}") Recordset15;
typedef TComInterface<Recordset15, &IID_Recordset15> Recordset15Ptr;

interface DECLSPEC_UUID("{0000054F-0000-0010-8000-00AA006D2EA4}") Recordset20;
typedef TComInterface<Recordset20, &IID_Recordset20> Recordset20Ptr;

interface DECLSPEC_UUID("{00000555-0000-0010-8000-00AA006D2EA4}") Recordset21;
typedef TComInterface<Recordset21, &IID_Recordset21> Recordset21Ptr;

interface DECLSPEC_UUID("{00000556-0000-0010-8000-00AA006D2EA4}") _Recordset;
typedef TComInterface<_Recordset, &IID__Recordset> _RecordsetPtr;

interface DECLSPEC_UUID("{00000506-0000-0010-8000-00AA006D2EA4}") Fields15;
typedef TComInterface<Fields15, &IID_Fields15> Fields15Ptr;

interface DECLSPEC_UUID("{0000054D-0000-0010-8000-00AA006D2EA4}") Fields20;
typedef TComInterface<Fields20, &IID_Fields20> Fields20Ptr;

interface DECLSPEC_UUID("{00000564-0000-0010-8000-00AA006D2EA4}") Fields;
typedef TComInterface<Fields, &IID_Fields> FieldsPtr;

interface DECLSPEC_UUID("{0000054C-0000-0010-8000-00AA006D2EA4}") Field20;
typedef TComInterface<Field20, &IID_Field20> Field20Ptr;

interface DECLSPEC_UUID("{00000569-0000-0010-8000-00AA006D2EA4}") Field;
typedef TComInterface<Field, &IID_Field> FieldPtr;

interface DECLSPEC_UUID("{00000283-0000-0010-8000-00AA006D2EA4}") ADORecordsetConstruction;
typedef TComInterface<ADORecordsetConstruction, &IID_ADORecordsetConstruction> ADORecordsetConstructionPtr;

interface DECLSPEC_UUID("{00000505-0000-0010-8000-00AA006D2EA4}") Field15;
typedef TComInterface<Field15, &IID_Field15> Field15Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef Recordset15 Recordset;
typedef Recordset15Ptr RecordsetPtr;

#define LIBID_OF_Recordset (&LIBID_ADOR)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Ador_tlb::PositionEnum PositionEnum_Param;
typedef Ador_tlb::SearchDirectionEnum SearchDirection;
typedef long ADO_LONGPTR;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum CursorTypeEnum
{
  adOpenUnspecified = 0xFFFFFFFF, 
  adOpenForwardOnly = 0, 
  adOpenKeyset = 1, 
  adOpenDynamic = 2, 
  adOpenStatic = 3
} CursorTypeEnum;

typedef enum CursorOptionEnum
{
  adHoldRecords = 256, 
  adMovePrevious = 512, 
  adAddNew = 16778240, 
  adDelete = 16779264, 
  adUpdate = 16809984, 
  adBookmark = 8192, 
  adApproxPosition = 16384, 
  adUpdateBatch = 65536, 
  adResync = 131072, 
  adNotify = 262144, 
  adFind = 524288, 
  adSeek = 4194304, 
  adIndex = 8388608
} CursorOptionEnum;

typedef enum LockTypeEnum
{
  adLockUnspecified = 0xFFFFFFFF, 
  adLockReadOnly = 1, 
  adLockPessimistic = 2, 
  adLockOptimistic = 3, 
  adLockBatchOptimistic = 4
} LockTypeEnum;

typedef enum ExecuteOptionEnum
{
  adOptionUnspecified = 0xFFFFFFFF, 
  adAsyncExecute = 16, 
  adAsyncFetch = 32, 
  adAsyncFetchNonBlocking = 64, 
  adExecuteNoRecords = 128, 
  adExecuteStream = 1024, 
  adExecuteRecord = 2048
} ExecuteOptionEnum;

typedef enum ConnectOptionEnum
{
  adConnectUnspecified = 0xFFFFFFFF, 
  adAsyncConnect = 16
} ConnectOptionEnum;

typedef enum ObjectStateEnum
{
  adStateClosed = 0, 
  adStateOpen = 1, 
  adStateConnecting = 2, 
  adStateExecuting = 4, 
  adStateFetching = 8
} ObjectStateEnum;

typedef enum CursorLocationEnum
{
  adUseNone = 1, 
  adUseServer = 2, 
  adUseClient = 3, 
  adUseClientBatch = 3
} CursorLocationEnum;

typedef enum DataTypeEnum
{
  adEmpty = 0, 
  adTinyInt = 16, 
  adSmallInt = 2, 
  adInteger = 3, 
  adBigInt = 20, 
  adUnsignedTinyInt = 17, 
  adUnsignedSmallInt = 18, 
  adUnsignedInt = 19, 
  adUnsignedBigInt = 21, 
  adSingle = 4, 
  adDouble = 5, 
  adCurrency = 6, 
  adDecimal = 14, 
  adNumeric = 131, 
  adBoolean = 11, 
  adError = 10, 
  adUserDefined = 132, 
  adVariant = 12, 
  adIDispatch = 9, 
  adIUnknown = 13, 
  adGUID = 72, 
  adDate = 7, 
  adDBDate = 133, 
  adDBTime = 134, 
  adDBTimeStamp = 135, 
  adBSTR = 8, 
  adChar = 129, 
  adVarChar = 200, 
  adLongVarChar = 201, 
  adWChar = 130, 
  adVarWChar = 202, 
  adLongVarWChar = 203, 
  adBinary = 128, 
  adVarBinary = 204, 
  adLongVarBinary = 205, 
  adChapter = 136, 
  adFileTime = 64, 
  adPropVariant = 138, 
  adVarNumeric = 139, 
  adArray = 8192
} DataTypeEnum;

typedef enum FieldAttributeEnum
{
  adFldUnspecified = 0xFFFFFFFF, 
  adFldMayDefer = 2, 
  adFldUpdatable = 4, 
  adFldUnknownUpdatable = 8, 
  adFldFixed = 16, 
  adFldIsNullable = 32, 
  adFldMayBeNull = 64, 
  adFldLong = 128, 
  adFldRowID = 256, 
  adFldRowVersion = 512, 
  adFldCacheDeferred = 4096, 
  adFldIsChapter = 8192, 
  adFldNegativeScale = 16384, 
  adFldKeyColumn = 32768, 
  adFldIsRowURL = 65536, 
  adFldIsDefaultStream = 131072, 
  adFldIsCollection = 262144
} FieldAttributeEnum;

typedef enum EditModeEnum
{
  adEditNone = 0, 
  adEditInProgress = 1, 
  adEditAdd = 2, 
  adEditDelete = 4
} EditModeEnum;

typedef enum RecordStatusEnum
{
  adRecOK = 0, 
  adRecNew = 1, 
  adRecModified = 2, 
  adRecDeleted = 4, 
  adRecUnmodified = 8, 
  adRecInvalid = 16, 
  adRecMultipleChanges = 64, 
  adRecPendingChanges = 128, 
  adRecCanceled = 256, 
  adRecCantRelease = 1024, 
  adRecConcurrencyViolation = 2048, 
  adRecIntegrityViolation = 4096, 
  adRecMaxChangesExceeded = 8192, 
  adRecObjectOpen = 16384, 
  adRecOutOfMemory = 32768, 
  adRecPermissionDenied = 65536, 
  adRecSchemaViolation = 131072, 
  adRecDBDeleted = 262144
} RecordStatusEnum;

typedef enum GetRowsOptionEnum
{
  adGetRowsRest = 0xFFFFFFFF
} GetRowsOptionEnum;

typedef enum PositionEnum
{
  adPosUnknown = 0xFFFFFFFF, 
  adPosBOF = 0xFFFFFFFE, 
  adPosEOF = 0xFFFFFFFD
} PositionEnum;

typedef enum BookmarkEnum
{
  adBookmarkCurrent = 0, 
  adBookmarkFirst = 1, 
  adBookmarkLast = 2
} BookmarkEnum;

typedef enum MarshalOptionsEnum
{
  adMarshalAll = 0, 
  adMarshalModifiedOnly = 1
} MarshalOptionsEnum;

typedef enum AffectEnum
{
  adAffectCurrent = 1, 
  adAffectGroup = 2, 
  adAffectAll = 3, 
  adAffectAllChapters = 4
} AffectEnum;

typedef enum ResyncEnum
{
  adResyncUnderlyingValues = 1, 
  adResyncAllValues = 2
} ResyncEnum;

typedef enum CompareEnum
{
  adCompareLessThan = 0, 
  adCompareEqual = 1, 
  adCompareGreaterThan = 2, 
  adCompareNotEqual = 3, 
  adCompareNotComparable = 4
} CompareEnum;

typedef enum FilterGroupEnum
{
  adFilterNone = 0, 
  adFilterPendingRecords = 1, 
  adFilterAffectedRecords = 2, 
  adFilterFetchedRecords = 3, 
  adFilterPredicate = 4, 
  adFilterConflictingRecords = 5
} FilterGroupEnum;

typedef enum SearchDirectionEnum
{
  adSearchForward = 1, 
  adSearchBackward = 0xFFFFFFFF
} SearchDirectionEnum;

typedef enum PersistFormatEnum
{
  adPersistADTG = 0, 
  adPersistXML = 1
} PersistFormatEnum;

typedef enum StringFormatEnum
{
  adClipString = 2
} StringFormatEnum;

typedef enum SeekEnum
{
  adSeekFirstEQ = 1, 
  adSeekLastEQ = 2, 
  adSeekAfterEQ = 4, 
  adSeekAfter = 8, 
  adSeekBeforeEQ = 16, 
  adSeekBefore = 32
} SeekEnum;

typedef enum ADCPROP_UPDATECRITERIA_ENUM
{
  adCriteriaKey = 0, 
  adCriteriaAllCols = 1, 
  adCriteriaUpdCols = 2, 
  adCriteriaTimeStamp = 3
} ADCPROP_UPDATECRITERIA_ENUM;

typedef enum ADCPROP_ASYNCTHREADPRIORITY_ENUM
{
  adPriorityLowest = 1, 
  adPriorityBelowNormal = 2, 
  adPriorityNormal = 3, 
  adPriorityAboveNormal = 4, 
  adPriorityHighest = 5
} ADCPROP_ASYNCTHREADPRIORITY_ENUM;

typedef enum ADCPROP_AUTORECALC_ENUM
{
  adRecalcUpFront = 0, 
  adRecalcAlways = 1
} ADCPROP_AUTORECALC_ENUM;

typedef enum ADCPROP_UPDATERESYNC_ENUM
{
  adResyncNone = 0, 
  adResyncAutoIncrement = 1, 
  adResyncConflicts = 2, 
  adResyncUpdates = 4, 
  adResyncInserts = 8, 
  adResyncAll = 15
} ADCPROP_UPDATERESYNC_ENUM;

typedef enum MoveRecordOptionsEnum
{
  adMoveUnspecified = 0xFFFFFFFF, 
  adMoveOverWrite = 1, 
  adMoveDontUpdateLinks = 2, 
  adMoveAllowEmulation = 4
} MoveRecordOptionsEnum;

typedef enum CopyRecordOptionsEnum
{
  adCopyUnspecified = 0xFFFFFFFF, 
  adCopyOverWrite = 1, 
  adCopyAllowEmulation = 4, 
  adCopyNonRecursive = 2
} CopyRecordOptionsEnum;

typedef enum StreamTypeEnum
{
  adTypeBinary = 1, 
  adTypeText = 2
} StreamTypeEnum;

typedef enum LineSeparatorEnum
{
  adLF = 10, 
  adCR = 13, 
  adCRLF = 0xFFFFFFFF
} LineSeparatorEnum;

typedef enum StreamOpenOptionsEnum
{
  adOpenStreamUnspecified = 0xFFFFFFFF, 
  adOpenStreamAsync = 1, 
  adOpenStreamFromRecord = 4
} StreamOpenOptionsEnum;

typedef enum StreamWriteEnum
{
  adWriteChar = 0, 
  adWriteLine = 1, 
  stWriteChar = 0, 
  stWriteLine = 1
} StreamWriteEnum;

typedef enum SaveOptionsEnum
{
  adSaveCreateNotExist = 1, 
  adSaveCreateOverWrite = 2
} SaveOptionsEnum;

typedef enum FieldEnum
{
  adDefaultStream = 0xFFFFFFFF, 
  adRecordURL = 0xFFFFFFFE
} FieldEnum;

typedef enum StreamReadEnum
{
  adReadAll = 0xFFFFFFFF, 
  adReadLine = 0xFFFFFFFE
} StreamReadEnum;

typedef enum RecordTypeEnum
{
  adSimpleRecord = 0, 
  adCollectionRecord = 1, 
  adStructDoc = 2
} RecordTypeEnum;

// *********************************************************************//
// Interface: _Collection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000512-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface _Collection  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Count(long* c/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/) = 0; // [-4]
  virtual HRESULT STDMETHODCALLTYPE Refresh(void) = 0; // [2]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Count(void)
  {
    long c;
    OLECHECK(this->get_Count((long*)&c));
    return c;
  }

  LPUNKNOWN __fastcall _NewEnum(void)
  {
    LPUNKNOWN ppvObject;
    OLECHECK(this->_NewEnum((LPUNKNOWN*)&ppvObject));
    return ppvObject;
  }


  __property   long            Count = {read = get_Count};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _DynaCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000513-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface _DynaCollection  : public Ador_tlb::_Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE Append(LPDISPATCH Object/*[in]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [-1]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _ADO
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000534-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface _ADO  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/) = 0; // [500]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ador_tlb::Properties* __fastcall get_Properties(void)
  {
    Ador_tlb::Properties* ppvObject;
    OLECHECK(this->get_Properties((Ador_tlb::Properties**)&ppvObject));
    return ppvObject;
  }


  __property   Ador_tlb::Properties* Properties = {read = get_Properties};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000504-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Properties  : public Ador_tlb::_Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ador_tlb::Property** ppvObject/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ador_tlb::Property* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ador_tlb::Property* ppvObject;
    OLECHECK(this->get_Item(Index, (Ador_tlb::Property**)&ppvObject));
    return ppvObject;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Property
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000503-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Property  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* pval/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT pval/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ador_tlb::DataTypeEnum* ptype/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE get_Attributes(long* plAttributes/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE set_Attributes(long plAttributes/*[in]*/) = 0; // [1610743812]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  VARIANT __fastcall get_Value(void)
  {
    VARIANT pval;
    OLECHECK(this->get_Value((VARIANT*)&pval));
    return pval;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  Ador_tlb::DataTypeEnum __fastcall get_Type(void)
  {
    Ador_tlb::DataTypeEnum ptype;
    OLECHECK(this->get_Type((Ador_tlb::DataTypeEnum*)&ptype));
    return ptype;
  }

  long __fastcall get_Attributes(void)
  {
    long plAttributes;
    OLECHECK(this->get_Attributes((long*)&plAttributes));
    return plAttributes;
  }


  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type};
  __property   long            Attributes = {read = get_Attributes, write = set_Attributes};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Recordset15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000050E-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Recordset15  : public Ador_tlb::_ADO
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/) = 0; // [1000]
  virtual HRESULT STDMETHODCALLTYPE set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/) = 0; // [1000]
  virtual HRESULT STDMETHODCALLTYPE _set_ActiveConnection(LPDISPATCH pvar/*[in]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE set_ActiveConnection(VARIANT pvar/*[in]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection(VARIANT* pvar/*[out,retval]*/) = 0; // [1001]
  virtual HRESULT STDMETHODCALLTYPE get_BOF(VARIANT_BOOL* pb/*[out,retval]*/) = 0; // [1002]
  virtual HRESULT STDMETHODCALLTYPE get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE set_Bookmark(VARIANT pvBookmark/*[in]*/) = 0; // [1003]
  virtual HRESULT STDMETHODCALLTYPE get_CacheSize(long* pl/*[out,retval]*/) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE set_CacheSize(long pl/*[in]*/) = 0; // [1004]
  virtual HRESULT STDMETHODCALLTYPE get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/) = 0; // [1005]
  virtual HRESULT STDMETHODCALLTYPE get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/) = 0; // [1006]
  virtual HRESULT STDMETHODCALLTYPE get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/) = 0; // [1008]
  virtual HRESULT STDMETHODCALLTYPE get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/) = 0; // [1009]
  virtual HRESULT STDMETHODCALLTYPE get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/) = 0; // [1010]
  virtual HRESULT STDMETHODCALLTYPE _set_Source(LPDISPATCH pvSource/*[in]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE set_Source(BSTR pvSource/*[in]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE get_Source(VARIANT* pvSource/*[out,retval]*/) = 0; // [1011]
  virtual HRESULT STDMETHODCALLTYPE AddNew(VARIANT FieldList/*[in,opt]*/= TNoParam(), 
                                           VARIANT Values/*[in,opt]*/= TNoParam()) = 0; // [1012]
  virtual HRESULT STDMETHODCALLTYPE CancelUpdate(void) = 0; // [1013]
  virtual HRESULT STDMETHODCALLTYPE Close(void) = 0; // [1014]
  virtual HRESULT STDMETHODCALLTYPE Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/) = 0; // [1015]
  virtual HRESULT STDMETHODCALLTYPE GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                                            VARIANT Fields/*[in,opt]*/, 
                                            VARIANT* pvar/*[out,retval]*/) = 0; // [1016]
  virtual HRESULT STDMETHODCALLTYPE Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, 
                                         VARIANT Start/*[in,opt]*/= TNoParam()) = 0; // [1017]
  virtual HRESULT STDMETHODCALLTYPE MoveNext(void) = 0; // [1018]
  virtual HRESULT STDMETHODCALLTYPE MovePrevious(void) = 0; // [1019]
  virtual HRESULT STDMETHODCALLTYPE MoveFirst(void) = 0; // [1020]
  virtual HRESULT STDMETHODCALLTYPE MoveLast(void) = 0; // [1021]
  virtual HRESULT STDMETHODCALLTYPE Open(VARIANT Source/*[in,opt]*/, 
                                         VARIANT ActiveConnection/*[in,opt]*/, 
                                         Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                                         Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                         long Options/*[in,def,opt]*/) = 0; // [1022]
  virtual HRESULT STDMETHODCALLTYPE Requery(long Options/*[in,def,opt]*/) = 0; // [1023]
  virtual HRESULT STDMETHODCALLTYPE _xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE _Update(VARIANT Fields/*[in,opt]*/= TNoParam(), 
                                            VARIANT Values/*[in,opt]*/= TNoParam()) = 0; // [1025]
  virtual HRESULT STDMETHODCALLTYPE get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/) = 0; // [1047]
  virtual HRESULT STDMETHODCALLTYPE set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/) = 0; // [1047]
  virtual HRESULT STDMETHODCALLTYPE get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/) = 0; // [1026]
  virtual HRESULT STDMETHODCALLTYPE get_Filter(VARIANT* Criteria/*[out,retval]*/) = 0; // [1030]
  virtual HRESULT STDMETHODCALLTYPE set_Filter(VARIANT Criteria/*[in]*/) = 0; // [1030]
  virtual HRESULT STDMETHODCALLTYPE get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/) = 0; // [1050]
  virtual HRESULT STDMETHODCALLTYPE get_PageSize(long* pl/*[out,retval]*/) = 0; // [1048]
  virtual HRESULT STDMETHODCALLTYPE set_PageSize(long pl/*[in]*/) = 0; // [1048]
  virtual HRESULT STDMETHODCALLTYPE get_Sort(BSTR* Criteria/*[out,retval]*/) = 0; // [1031]
  virtual HRESULT STDMETHODCALLTYPE set_Sort(BSTR Criteria/*[in]*/) = 0; // [1031]
  virtual HRESULT STDMETHODCALLTYPE get_Status(long* pl/*[out,retval]*/) = 0; // [1029]
  virtual HRESULT STDMETHODCALLTYPE get_State(long* plObjState/*[out,retval]*/) = 0; // [1054]
  virtual HRESULT STDMETHODCALLTYPE _xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/) = 0; // [-1]
  virtual HRESULT STDMETHODCALLTYPE UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/) = 0; // [1035]
  virtual HRESULT STDMETHODCALLTYPE CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/) = 0; // [1049]
  virtual HRESULT STDMETHODCALLTYPE get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/) = 0; // [1051]
  virtual HRESULT STDMETHODCALLTYPE set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/) = 0; // [1051]
  virtual HRESULT STDMETHODCALLTYPE NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                                  Ador_tlb::Recordset15** ppiRs/*[out,retval]*/) = 0; // [1052]
  virtual HRESULT STDMETHODCALLTYPE Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                                             VARIANT_BOOL* pb/*[out,retval]*/) = 0; // [1036]
  virtual HRESULT STDMETHODCALLTYPE get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/) = 0; // [-8]
  virtual HRESULT STDMETHODCALLTYPE set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/) = 0; // [-8]
  virtual HRESULT STDMETHODCALLTYPE get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/) = 0; // [1053]
  virtual HRESULT STDMETHODCALLTYPE set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/) = 0; // [1053]
  virtual HRESULT STDMETHODCALLTYPE Find(BSTR Criteria/*[in]*/, 
                                         Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                                         Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                                         VARIANT Start/*[in,opt]*/= TNoParam()) = 0; // [1058]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePosition(void)
  {
    Ador_tlb::PositionEnum_Param pl;
    OLECHECK(this->get_AbsolutePosition((Ador_tlb::PositionEnum_Param*)&pl));
    return pl;
  }

  VARIANT __fastcall get_ActiveConnection(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_ActiveConnection((VARIANT*)&pvar));
    return pvar;
  }

  VARIANT_BOOL __fastcall get_BOF(void)
  {
    VARIANT_BOOL pb;
    OLECHECK(this->get_BOF((VARIANT_BOOL*)&pb));
    return pb;
  }

  VARIANT __fastcall get_Bookmark(void)
  {
    VARIANT pvBookmark;
    OLECHECK(this->get_Bookmark((VARIANT*)&pvBookmark));
    return pvBookmark;
  }

  long __fastcall get_CacheSize(void)
  {
    long pl;
    OLECHECK(this->get_CacheSize((long*)&pl));
    return pl;
  }

  Ador_tlb::CursorTypeEnum __fastcall get_CursorType(void)
  {
    Ador_tlb::CursorTypeEnum plCursorType;
    OLECHECK(this->get_CursorType((Ador_tlb::CursorTypeEnum*)&plCursorType));
    return plCursorType;
  }

  VARIANT_BOOL __fastcall get_EOF_(void)
  {
    VARIANT_BOOL pb;
    OLECHECK(this->get_EOF_((VARIANT_BOOL*)&pb));
    return pb;
  }

  Ador_tlb::Fields15* __fastcall get_Fields(void)
  {
    Ador_tlb::Fields15* ppvObject;
    OLECHECK(this->get_Fields((Ador_tlb::Fields15**)&ppvObject));
    return ppvObject;
  }

  Ador_tlb::LockTypeEnum __fastcall get_LockType(void)
  {
    Ador_tlb::LockTypeEnum plLockType;
    OLECHECK(this->get_LockType((Ador_tlb::LockTypeEnum*)&plLockType));
    return plLockType;
  }

  Ador_tlb::ADO_LONGPTR __fastcall get_MaxRecords(void)
  {
    Ador_tlb::ADO_LONGPTR plMaxRecords;
    OLECHECK(this->get_MaxRecords((Ador_tlb::ADO_LONGPTR*)&plMaxRecords));
    return plMaxRecords;
  }

  Ador_tlb::ADO_LONGPTR __fastcall get_RecordCount(void)
  {
    Ador_tlb::ADO_LONGPTR pl;
    OLECHECK(this->get_RecordCount((Ador_tlb::ADO_LONGPTR*)&pl));
    return pl;
  }

  VARIANT __fastcall get_Source(void)
  {
    VARIANT pvSource;
    OLECHECK(this->get_Source((VARIANT*)&pvSource));
    return pvSource;
  }

  VARIANT __fastcall GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/= TNoParam(), 
                             VARIANT Fields/*[in,opt]*/= TNoParam())
  {
    VARIANT pvar;
    OLECHECK(this->GetRows(Rows, Start, Fields, (VARIANT*)&pvar));
    return pvar;
  }

  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePage(void)
  {
    Ador_tlb::PositionEnum_Param pl;
    OLECHECK(this->get_AbsolutePage((Ador_tlb::PositionEnum_Param*)&pl));
    return pl;
  }

  Ador_tlb::EditModeEnum __fastcall get_EditMode(void)
  {
    Ador_tlb::EditModeEnum pl;
    OLECHECK(this->get_EditMode((Ador_tlb::EditModeEnum*)&pl));
    return pl;
  }

  VARIANT __fastcall get_Filter(void)
  {
    VARIANT Criteria;
    OLECHECK(this->get_Filter((VARIANT*)&Criteria));
    return Criteria;
  }

  Ador_tlb::ADO_LONGPTR __fastcall get_PageCount(void)
  {
    Ador_tlb::ADO_LONGPTR pl;
    OLECHECK(this->get_PageCount((Ador_tlb::ADO_LONGPTR*)&pl));
    return pl;
  }

  long __fastcall get_PageSize(void)
  {
    long pl;
    OLECHECK(this->get_PageSize((long*)&pl));
    return pl;
  }

  BSTR __fastcall get_Sort(void)
  {
    BSTR Criteria = 0;
    OLECHECK(this->get_Sort((BSTR*)&Criteria));
    return Criteria;
  }

  long __fastcall get_Status(void)
  {
    long pl;
    OLECHECK(this->get_Status((long*)&pl));
    return pl;
  }

  long __fastcall get_State(void)
  {
    long plObjState;
    OLECHECK(this->get_State((long*)&plObjState));
    return plObjState;
  }

  Ador_tlb::Recordset15* __fastcall _xClone(void)
  {
    Ador_tlb::Recordset15* ppvObject;
    OLECHECK(this->_xClone((Ador_tlb::Recordset15**)&ppvObject));
    return ppvObject;
  }

  Ador_tlb::CursorLocationEnum __fastcall get_CursorLocation(void)
  {
    Ador_tlb::CursorLocationEnum plCursorLoc;
    OLECHECK(this->get_CursorLocation((Ador_tlb::CursorLocationEnum*)&plCursorLoc));
    return plCursorLoc;
  }

  Ador_tlb::Recordset15* __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/= TNoParam())
  {
    Ador_tlb::Recordset15* ppiRs;
    OLECHECK(this->NextRecordset(RecordsAffected, (Ador_tlb::Recordset15**)&ppiRs));
    return ppiRs;
  }

  VARIANT_BOOL __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/)
  {
    VARIANT_BOOL pb;
    OLECHECK(this->Supports(CursorOptions, (VARIANT_BOOL*)&pb));
    return pb;
  }

  VARIANT __fastcall get_Collect(VARIANT Index/*[in]*/)
  {
    VARIANT pvar;
    OLECHECK(this->get_Collect(Index, (VARIANT*)&pvar));
    return pvar;
  }

  Ador_tlb::MarshalOptionsEnum __fastcall get_MarshalOptions(void)
  {
    Ador_tlb::MarshalOptionsEnum peMarshal;
    OLECHECK(this->get_MarshalOptions((Ador_tlb::MarshalOptionsEnum*)&peMarshal));
    return peMarshal;
  }


  __property   Ador_tlb::PositionEnum_Param AbsolutePosition = {read = get_AbsolutePosition, write = set_AbsolutePosition};
  __property   LPDISPATCH      ActiveConnection = {write = _set_ActiveConnection};
  __property   VARIANT_BOOL    BOF = {read = get_BOF};
  __property   long            CacheSize = {read = get_CacheSize, write = set_CacheSize};
  __property   Ador_tlb::CursorTypeEnum CursorType = {read = get_CursorType, write = set_CursorType};
  __property   VARIANT_BOOL    EOF_ = {read = get_EOF_};
  __property   Ador_tlb::Fields15* Fields = {read = get_Fields};
  __property   Ador_tlb::LockTypeEnum LockType = {read = get_LockType, write = set_LockType};
  __property   Ador_tlb::ADO_LONGPTR MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Ador_tlb::ADO_LONGPTR RecordCount = {read = get_RecordCount};
  __property   LPDISPATCH      Source = {write = _set_Source};
  __property   Ador_tlb::PositionEnum_Param AbsolutePage = {read = get_AbsolutePage, write = set_AbsolutePage};
  __property   Ador_tlb::EditModeEnum EditMode = {read = get_EditMode};
  __property   Ador_tlb::ADO_LONGPTR PageCount = {read = get_PageCount};
  __property   long            PageSize = {read = get_PageSize, write = set_PageSize};
  __property   BSTR            Sort = {read = get_Sort};
  __property   long            Status = {read = get_Status};
  __property   long            State = {read = get_State};
  __property   Ador_tlb::CursorLocationEnum CursorLocation = {read = get_CursorLocation, write = set_CursorLocation};
  __property   Ador_tlb::MarshalOptionsEnum MarshalOptions = {read = get_MarshalOptions, write = set_MarshalOptions};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Recordset20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054F-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Recordset20  : public Ador_tlb::Recordset15
{
public:
  virtual HRESULT STDMETHODCALLTYPE Cancel(void) = 0; // [1055]
  virtual HRESULT STDMETHODCALLTYPE get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/) = 0; // [1056]
  virtual HRESULT STDMETHODCALLTYPE _set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/) = 0; // [1056]
  virtual HRESULT STDMETHODCALLTYPE _xSave(BSTR FileName/*[in,def,opt]*/, 
                                           Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/) = 0; // [1610874883]
  virtual HRESULT STDMETHODCALLTYPE get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/) = 0; // [1061]
  virtual HRESULT STDMETHODCALLTYPE set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/) = 0; // [1063]
  virtual HRESULT STDMETHODCALLTYPE get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/) = 0; // [1063]
  virtual HRESULT STDMETHODCALLTYPE GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                              long NumRows/*[in,def,opt]*/, 
                                              BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                              BSTR RowDelimeter/*[in,def,opt]*/, 
                                              BSTR NullExpr/*[in,def,opt]*/, 
                                              BSTR* pRetString/*[out,retval]*/) = 0; // [1062]
  virtual HRESULT STDMETHODCALLTYPE get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/) = 0; // [1064]
  virtual HRESULT STDMETHODCALLTYPE set_DataMember(BSTR pbstrDataMember/*[in]*/) = 0; // [1064]
  virtual HRESULT STDMETHODCALLTYPE CompareBookmarks(VARIANT Bookmark1/*[in]*/, 
                                                     VARIANT Bookmark2/*[in]*/, 
                                                     Ador_tlb::CompareEnum* pCompare/*[out,retval]*/) = 0; // [1065]
  virtual HRESULT STDMETHODCALLTYPE Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                          Ador_tlb::Recordset15** ppvObject/*[out,retval]*/) = 0; // [1034]
  virtual HRESULT STDMETHODCALLTYPE Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                                           Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/) = 0; // [1024]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  LPUNKNOWN __fastcall get_DataSource(void)
  {
    LPUNKNOWN ppunkDataSource;
    OLECHECK(this->get_DataSource((LPUNKNOWN*)&ppunkDataSource));
    return ppunkDataSource;
  }

  LPDISPATCH __fastcall get_ActiveCommand(void)
  {
    LPDISPATCH ppCmd;
    OLECHECK(this->get_ActiveCommand((LPDISPATCH*)&ppCmd));
    return ppCmd;
  }

  VARIANT_BOOL __fastcall get_StayInSync(void)
  {
    VARIANT_BOOL pbStayInSync;
    OLECHECK(this->get_StayInSync((VARIANT_BOOL*)&pbStayInSync));
    return pbStayInSync;
  }

  BSTR __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                            long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                            BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/)
  {
    BSTR pRetString = 0;
    OLECHECK(this->GetString(StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, (BSTR*)&pRetString));
    return pRetString;
  }

  BSTR __fastcall get_DataMember(void)
  {
    BSTR pbstrDataMember = 0;
    OLECHECK(this->get_DataMember((BSTR*)&pbstrDataMember));
    return pbstrDataMember;
  }

  Ador_tlb::CompareEnum __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, 
                                                    VARIANT Bookmark2/*[in]*/)
  {
    Ador_tlb::CompareEnum pCompare;
    OLECHECK(this->CompareBookmarks(Bookmark1, Bookmark2, (Ador_tlb::CompareEnum*)&pCompare));
    return pCompare;
  }

  Ador_tlb::Recordset15* __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/)
  {
    Ador_tlb::Recordset15* ppvObject;
    OLECHECK(this->Clone(LockType, (Ador_tlb::Recordset15**)&ppvObject));
    return ppvObject;
  }


  __property   LPUNKNOWN       DataSource = {read = get_DataSource, write = _set_DataSource};
  __property   LPDISPATCH      ActiveCommand = {read = get_ActiveCommand};
  __property   VARIANT_BOOL    StayInSync = {read = get_StayInSync, write = set_StayInSync};
  __property   BSTR            DataMember = {read = get_DataMember};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Recordset21
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000555-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Recordset21  : public Ador_tlb::Recordset20
{
public:
  virtual HRESULT STDMETHODCALLTYPE Seek(VARIANT KeyValues/*[in]*/, 
                                         Ador_tlb::SeekEnum SeekOption/*[in,def,opt]*/) = 0; // [1066]
  virtual HRESULT STDMETHODCALLTYPE set_Index(BSTR pbstrIndex/*[in]*/) = 0; // [1067]
  virtual HRESULT STDMETHODCALLTYPE get_Index(BSTR* pbstrIndex/*[out,retval]*/) = 0; // [1067]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Index(void)
  {
    BSTR pbstrIndex = 0;
    OLECHECK(this->get_Index((BSTR*)&pbstrIndex));
    return pbstrIndex;
  }


  __property   BSTR            Index = {read = get_Index, write = set_Index};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _Recordset
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000556-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface _Recordset  : public Ador_tlb::Recordset21
{
public:
  virtual HRESULT STDMETHODCALLTYPE Save(VARIANT Destination/*[in,opt]*/, 
                                         Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/) = 0; // [1057]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Fields15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000506-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Fields15  : public Ador_tlb::_Collection
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Item(VARIANT Index/*[in]*/, 
                                             Ador_tlb::Field20** ppvObject/*[out,retval]*/) = 0; // [0]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ador_tlb::Field20* __fastcall get_Item(VARIANT Index/*[in]*/)
  {
    Ador_tlb::Field20* ppvObject;
    OLECHECK(this->get_Item(Index, (Ador_tlb::Field20**)&ppvObject));
    return ppvObject;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Fields20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054D-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Fields20  : public Ador_tlb::Fields15
{
public:
  virtual HRESULT STDMETHODCALLTYPE _Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                                            Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                                            Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/) = 0; // [1610874880]
  virtual HRESULT STDMETHODCALLTYPE Delete(VARIANT Index/*[in]*/) = 0; // [4]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Fields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000564-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Fields  : public Ador_tlb::Fields20
{
public:
  virtual HRESULT STDMETHODCALLTYPE Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                                           Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                                           Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/, 
                                           VARIANT FieldValue/*[in,opt]*/= TNoParam()) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE _Update(void) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE Resync(Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE CancelUpdate(void) = 0; // [7]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Field20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054C-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Field20  : public Ador_tlb::_ADO
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/) = 0; // [1109]
  virtual HRESULT STDMETHODCALLTYPE get_Attributes(long* pl/*[out,retval]*/) = 0; // [1114]
  virtual HRESULT STDMETHODCALLTYPE get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/) = 0; // [1103]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [1100]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/) = 0; // [1102]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* pvar/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT pvar/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Precision(unsigned_char* pbPrecision/*[out,retval]*/) = 0; // [1112]
  virtual HRESULT STDMETHODCALLTYPE get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/) = 0; // [1113]
  virtual HRESULT STDMETHODCALLTYPE AppendChunk(VARIANT Data/*[in]*/) = 0; // [1107]
  virtual HRESULT STDMETHODCALLTYPE GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/) = 0; // [1108]
  virtual HRESULT STDMETHODCALLTYPE get_OriginalValue(VARIANT* pvar/*[out,retval]*/) = 0; // [1104]
  virtual HRESULT STDMETHODCALLTYPE get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/) = 0; // [1105]
  virtual HRESULT STDMETHODCALLTYPE get_DataFormat(LPUNKNOWN* ppiDF/*[out,retval]*/) = 0; // [1115]
  virtual HRESULT STDMETHODCALLTYPE _set_DataFormat(LPUNKNOWN ppiDF/*[in]*/) = 0; // [1115]
  virtual HRESULT STDMETHODCALLTYPE set_Precision(unsigned_char pbPrecision/*[in]*/) = 0; // [1112]
  virtual HRESULT STDMETHODCALLTYPE set_NumericScale(unsigned_char pbNumericScale/*[in]*/) = 0; // [1113]
  virtual HRESULT STDMETHODCALLTYPE set_Type(Ador_tlb::DataTypeEnum pDataType/*[in]*/) = 0; // [1102]
  virtual HRESULT STDMETHODCALLTYPE set_DefinedSize(Ador_tlb::ADO_LONGPTR pl/*[in]*/) = 0; // [1103]
  virtual HRESULT STDMETHODCALLTYPE set_Attributes(long pl/*[in]*/) = 0; // [1114]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ador_tlb::ADO_LONGPTR __fastcall get_ActualSize(void)
  {
    Ador_tlb::ADO_LONGPTR pl;
    OLECHECK(this->get_ActualSize((Ador_tlb::ADO_LONGPTR*)&pl));
    return pl;
  }

  long __fastcall get_Attributes(void)
  {
    long pl;
    OLECHECK(this->get_Attributes((long*)&pl));
    return pl;
  }

  Ador_tlb::ADO_LONGPTR __fastcall get_DefinedSize(void)
  {
    Ador_tlb::ADO_LONGPTR pl;
    OLECHECK(this->get_DefinedSize((Ador_tlb::ADO_LONGPTR*)&pl));
    return pl;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  Ador_tlb::DataTypeEnum __fastcall get_Type(void)
  {
    Ador_tlb::DataTypeEnum pDataType;
    OLECHECK(this->get_Type((Ador_tlb::DataTypeEnum*)&pDataType));
    return pDataType;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_Value((VARIANT*)&pvar));
    return pvar;
  }

  unsigned_char __fastcall get_Precision(void)
  {
    unsigned_char pbPrecision;
    OLECHECK(this->get_Precision((unsigned_char*)&pbPrecision));
    return pbPrecision;
  }

  unsigned_char __fastcall get_NumericScale(void)
  {
    unsigned_char pbNumericScale;
    OLECHECK(this->get_NumericScale((unsigned_char*)&pbNumericScale));
    return pbNumericScale;
  }

  VARIANT __fastcall GetChunk(long Length/*[in]*/)
  {
    VARIANT pvar;
    OLECHECK(this->GetChunk(Length, (VARIANT*)&pvar));
    return pvar;
  }

  VARIANT __fastcall get_OriginalValue(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_OriginalValue((VARIANT*)&pvar));
    return pvar;
  }

  VARIANT __fastcall get_UnderlyingValue(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_UnderlyingValue((VARIANT*)&pvar));
    return pvar;
  }

  LPUNKNOWN __fastcall get_DataFormat(void)
  {
    LPUNKNOWN ppiDF;
    OLECHECK(this->get_DataFormat((LPUNKNOWN*)&ppiDF));
    return ppiDF;
  }


  __property   Ador_tlb::ADO_LONGPTR ActualSize = {read = get_ActualSize};
  __property   long            Attributes = {read = get_Attributes, write = set_Attributes};
  __property   Ador_tlb::ADO_LONGPTR DefinedSize = {read = get_DefinedSize, write = set_DefinedSize};
  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type, write = set_Type};
  __property   unsigned_char   Precision = {read = get_Precision, write = set_Precision};
  __property   unsigned_char   NumericScale = {read = get_NumericScale, write = set_NumericScale};
  __property   LPUNKNOWN       DataFormat = {read = get_DataFormat, write = _set_DataFormat};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: Field
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000569-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Field  : public Ador_tlb::Field20
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Status(long* pFStatus/*[out,retval]*/) = 0; // [1116]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_Status(void)
  {
    long pFStatus;
    OLECHECK(this->get_Status((long*)&pFStatus));
    return pFStatus;
  }


  __property   long            Status = {read = get_Status};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ADORecordsetConstruction
// Flags:     (4608) Restricted Dispatchable
// GUID:      {00000283-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface ADORecordsetConstruction  : public IDispatch
{
public:
   HRESULT STDMETHODCALLTYPE get_Rowset(LPUNKNOWN* ppRowset/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE set_Rowset(LPUNKNOWN ppRowset/*[in]*/); // [1610743808]
   HRESULT STDMETHODCALLTYPE get_Chapter(Ador_tlb::ADO_LONGPTR* plChapter/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE set_Chapter(Ador_tlb::ADO_LONGPTR plChapter/*[in]*/); // [1610743810]
   HRESULT STDMETHODCALLTYPE get_RowPosition(LPUNKNOWN* ppRowPos/*[out,retval]*/); // [-1]
   HRESULT STDMETHODCALLTYPE set_RowPosition(LPUNKNOWN ppRowPos/*[in]*/); // [1610743812]
};

// *********************************************************************//
// Interface: Field15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000505-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
interface Field15  : public Ador_tlb::_ADO
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/) = 0; // [1109]
  virtual HRESULT STDMETHODCALLTYPE get_Attributes(long* pl/*[out,retval]*/) = 0; // [1114]
  virtual HRESULT STDMETHODCALLTYPE get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/) = 0; // [1103]
  virtual HRESULT STDMETHODCALLTYPE get_Name(BSTR* pbstr/*[out,retval]*/) = 0; // [1100]
  virtual HRESULT STDMETHODCALLTYPE get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/) = 0; // [1102]
  virtual HRESULT STDMETHODCALLTYPE get_Value(VARIANT* pvar/*[out,retval]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE set_Value(VARIANT pvar/*[in]*/) = 0; // [0]
  virtual HRESULT STDMETHODCALLTYPE get_Precision(unsigned_char* pbPrecision/*[out,retval]*/) = 0; // [1112]
  virtual HRESULT STDMETHODCALLTYPE get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/) = 0; // [1113]
  virtual HRESULT STDMETHODCALLTYPE AppendChunk(VARIANT Data/*[in]*/) = 0; // [1107]
  virtual HRESULT STDMETHODCALLTYPE GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/) = 0; // [1108]
  virtual HRESULT STDMETHODCALLTYPE get_OriginalValue(VARIANT* pvar/*[out,retval]*/) = 0; // [1104]
  virtual HRESULT STDMETHODCALLTYPE get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/) = 0; // [1105]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ador_tlb::ADO_LONGPTR __fastcall get_ActualSize(void)
  {
    Ador_tlb::ADO_LONGPTR pl;
    OLECHECK(this->get_ActualSize((Ador_tlb::ADO_LONGPTR*)&pl));
    return pl;
  }

  long __fastcall get_Attributes(void)
  {
    long pl;
    OLECHECK(this->get_Attributes((long*)&pl));
    return pl;
  }

  Ador_tlb::ADO_LONGPTR __fastcall get_DefinedSize(void)
  {
    Ador_tlb::ADO_LONGPTR pl;
    OLECHECK(this->get_DefinedSize((Ador_tlb::ADO_LONGPTR*)&pl));
    return pl;
  }

  BSTR __fastcall get_Name(void)
  {
    BSTR pbstr = 0;
    OLECHECK(this->get_Name((BSTR*)&pbstr));
    return pbstr;
  }

  Ador_tlb::DataTypeEnum __fastcall get_Type(void)
  {
    Ador_tlb::DataTypeEnum pDataType;
    OLECHECK(this->get_Type((Ador_tlb::DataTypeEnum*)&pDataType));
    return pDataType;
  }

  VARIANT __fastcall get_Value(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_Value((VARIANT*)&pvar));
    return pvar;
  }

  unsigned_char __fastcall get_Precision(void)
  {
    unsigned_char pbPrecision;
    OLECHECK(this->get_Precision((unsigned_char*)&pbPrecision));
    return pbPrecision;
  }

  unsigned_char __fastcall get_NumericScale(void)
  {
    unsigned_char pbNumericScale;
    OLECHECK(this->get_NumericScale((unsigned_char*)&pbNumericScale));
    return pbNumericScale;
  }

  VARIANT __fastcall GetChunk(long Length/*[in]*/)
  {
    VARIANT pvar;
    OLECHECK(this->GetChunk(Length, (VARIANT*)&pvar));
    return pvar;
  }

  VARIANT __fastcall get_OriginalValue(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_OriginalValue((VARIANT*)&pvar));
    return pvar;
  }

  VARIANT __fastcall get_UnderlyingValue(void)
  {
    VARIANT pvar;
    OLECHECK(this->get_UnderlyingValue((VARIANT*)&pvar));
    return pvar;
  }


  __property   Ador_tlb::ADO_LONGPTR ActualSize = {read = get_ActualSize};
  __property   long            Attributes = {read = get_Attributes};
  __property   Ador_tlb::ADO_LONGPTR DefinedSize = {read = get_DefinedSize};
  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type};
  __property   unsigned_char   Precision = {read = get_Precision};
  __property   unsigned_char   NumericScale = {read = get_NumericScale};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<_Collection>  TCOM_Collection;

// *********************************************************************//
// DispIntf:  _Collection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000512-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class _CollectionDispT : public TAutoDriver<_Collection>
{
public:
  _CollectionDispT(){}

  _CollectionDispT(_Collection *pintf)
  {
    TAutoDriver<_Collection>::Bind(pintf, false);
  }

  _CollectionDispT(_CollectionPtr pintf)
  {
    TAutoDriver<_Collection>::Bind(pintf, true);
  }

  _CollectionDispT& operator=(_Collection *pintf)
  {
    TAutoDriver<_Collection>::Bind(pintf, false);
    return *this;
  }

  _CollectionDispT& operator=(_CollectionPtr pintf)
  {
    TAutoDriver<_Collection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Count(long* c/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Refresh();

  __property   long            Count = {read = get_Count};
};
typedef _CollectionDispT<_Collection> _CollectionDisp;

typedef TComInterface<_DynaCollection>  TCOM_DynaCollection;

// *********************************************************************//
// DispIntf:  _DynaCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000513-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class _DynaCollectionDispT : public TAutoDriver<_DynaCollection>
{
public:
  _DynaCollectionDispT(){}

  _DynaCollectionDispT(_DynaCollection *pintf)
  {
    TAutoDriver<_DynaCollection>::Bind(pintf, false);
  }

  _DynaCollectionDispT(_DynaCollectionPtr pintf)
  {
    TAutoDriver<_DynaCollection>::Bind(pintf, true);
  }

  _DynaCollectionDispT& operator=(_DynaCollection *pintf)
  {
    TAutoDriver<_DynaCollection>::Bind(pintf, false);
    return *this;
  }

  _DynaCollectionDispT& operator=(_DynaCollectionPtr pintf)
  {
    TAutoDriver<_DynaCollection>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Append(LPDISPATCH Object/*[in]*/);
  HRESULT         __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* c/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Refresh();


  __property   long            Count = {read = get_Count};
};
typedef _DynaCollectionDispT<_DynaCollection> _DynaCollectionDisp;

typedef TComInterface<_ADO>  TCOM_ADO;

// *********************************************************************//
// DispIntf:  _ADO
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000534-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class _ADODispT : public TAutoDriver<_ADO>
{
public:
  _ADODispT(){}

  _ADODispT(_ADO *pintf)
  {
    TAutoDriver<_ADO>::Bind(pintf, false);
  }

  _ADODispT(_ADOPtr pintf)
  {
    TAutoDriver<_ADO>::Bind(pintf, true);
  }

  _ADODispT& operator=(_ADO *pintf)
  {
    TAutoDriver<_ADO>::Bind(pintf, false);
    return *this;
  }

  _ADODispT& operator=(_ADOPtr pintf)
  {
    TAutoDriver<_ADO>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef _ADODispT<_ADO> _ADODisp;

typedef TComInterface<Properties>  TCOMProperties;

// *********************************************************************//
// DispIntf:  Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000504-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class PropertiesDispT : public TAutoDriver<Properties>
{
public:
  PropertiesDispT(){}

  PropertiesDispT(Properties *pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, false);
  }

  PropertiesDispT(PropertiesPtr pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, true);
  }

  PropertiesDispT& operator=(Properties *pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, false);
    return *this;
  }

  PropertiesDispT& operator=(PropertiesPtr pintf)
  {
    TAutoDriver<Properties>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ador_tlb::Property** ppvObject/*[out,retval]*/);
  Ador_tlb::Property* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* c/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Refresh();


  __property   long            Count = {read = get_Count};
};
typedef PropertiesDispT<Properties> PropertiesDisp;

typedef TComInterface<Property>  TCOMProperty;

// *********************************************************************//
// DispIntf:  Property
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000503-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class PropertyDispT : public TAutoDriver<Property>
{
public:
  PropertyDispT(){}

  PropertyDispT(Property *pintf)
  {
    TAutoDriver<Property>::Bind(pintf, false);
  }

  PropertyDispT(PropertyPtr pintf)
  {
    TAutoDriver<Property>::Bind(pintf, true);
  }

  PropertyDispT& operator=(Property *pintf)
  {
    TAutoDriver<Property>::Bind(pintf, false);
    return *this;
  }

  PropertyDispT& operator=(PropertyPtr pintf)
  {
    TAutoDriver<Property>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Value(VARIANT* pval/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pval/*[in]*/);
  HRESULT         __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Type(Ador_tlb::DataTypeEnum* ptype/*[out,retval]*/);
  Ador_tlb::DataTypeEnum __fastcall get_Type(void);
  HRESULT         __fastcall get_Attributes(long* plAttributes/*[out,retval]*/);
  long            __fastcall get_Attributes(void);
  HRESULT         __fastcall set_Attributes(long plAttributes/*[in]*/);

  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type};
  __property   long            Attributes = {read = get_Attributes, write = set_Attributes};
};
typedef PropertyDispT<Property> PropertyDisp;

// *********************************************************************//
// SmartIntf: TCOMRecordset15
// Interface: Recordset15
// *********************************************************************//
template <class T /* Recordset15 */ >
class TCOMRecordset15T : public TComInterface<Recordset15>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMRecordset15T() {}
  TCOMRecordset15T(Recordset15 *intf, bool addRef = false) : TComInterface<Recordset15>(intf, addRef) {}
  TCOMRecordset15T(const TCOMRecordset15T& src) : TComInterface<Recordset15>(src) {}
  TCOMRecordset15T& operator=(const TCOMRecordset15T& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePosition(void);
  HRESULT         __fastcall set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall _set_ActiveConnection(LPDISPATCH pvar/*[in]*/);
  HRESULT         __fastcall set_ActiveConnection(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_ActiveConnection(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_ActiveConnection(void);
  HRESULT         __fastcall get_BOF(VARIANT_BOOL* pb/*[out,retval]*/);
  HRESULT         __fastcall get_BOF(TOLEBOOL* pb/*[out,retval]*/);
  TOLEBOOL        __fastcall get_BOF(void);
  HRESULT         __fastcall get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/);
  VARIANT         __fastcall get_Bookmark(void);
  HRESULT         __fastcall set_Bookmark(VARIANT pvBookmark/*[in]*/);
  HRESULT         __fastcall get_CacheSize(long* pl/*[out,retval]*/);
  long            __fastcall get_CacheSize(void);
  HRESULT         __fastcall set_CacheSize(long pl/*[in]*/);
  HRESULT         __fastcall get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/);
  Ador_tlb::CursorTypeEnum __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/);
  HRESULT         __fastcall get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/);
  HRESULT         __fastcall get_EOF_(TOLEBOOL* pb/*[out,retval]*/);
  TOLEBOOL        __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/);
  HRESULT         __fastcall get_Fields(Ador_tlb::Fields15Ptr* ppvObject/*[out,retval]*/);
  Ador_tlb::Fields15Ptr __fastcall get_Fields(void);
  HRESULT         __fastcall get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/);
  Ador_tlb::LockTypeEnum __fastcall get_LockType(void);
  HRESULT         __fastcall set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/);
  HRESULT         __fastcall get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_MaxRecords(void);
  HRESULT         __fastcall set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/);
  HRESULT         __fastcall get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_RecordCount(void);
  HRESULT         __fastcall _set_Source(LPDISPATCH pvSource/*[in]*/);
  HRESULT         __fastcall set_Source(BSTR pvSource/*[in]*/);
  HRESULT         __fastcall get_Source(VARIANT* pvSource/*[out,retval]*/);
  VARIANT         __fastcall get_Source(void);
  HRESULT         __fastcall AddNew(VARIANT FieldList/*[in,opt]*/= TNoParam(), 
                                    VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CancelUpdate(void);
  HRESULT         __fastcall Close(void);
  HRESULT         __fastcall Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                                     VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetRows(long Rows/*[in,def,opt]*/, 
                                     VARIANT Start/*[in,opt]*/= TNoParam(), 
                                     VARIANT Fields/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall MoveNext(void);
  HRESULT         __fastcall MovePrevious(void);
  HRESULT         __fastcall MoveFirst(void);
  HRESULT         __fastcall MoveLast(void);
  HRESULT         __fastcall Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                                  Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                                  Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                  long Options/*[in,def,opt]*/);
  HRESULT         __fastcall Requery(long Options/*[in,def,opt]*/);
  HRESULT         __fastcall _xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall _Update(VARIANT Fields/*[in,opt]*/= TNoParam(), 
                                     VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePage(void);
  HRESULT         __fastcall set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/);
  Ador_tlb::EditModeEnum __fastcall get_EditMode(void);
  HRESULT         __fastcall get_Filter(VARIANT* Criteria/*[out,retval]*/);
  VARIANT         __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(VARIANT Criteria/*[in]*/);
  HRESULT         __fastcall get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_PageCount(void);
  HRESULT         __fastcall get_PageSize(long* pl/*[out,retval]*/);
  long            __fastcall get_PageSize(void);
  HRESULT         __fastcall set_PageSize(long pl/*[in]*/);
  HRESULT         __fastcall get_Sort(BSTR* Criteria/*[out,retval]*/);
  BSTR            __fastcall get_Sort(void);
  HRESULT         __fastcall set_Sort(BSTR Criteria/*[in]*/);
  HRESULT         __fastcall get_Status(long* pl/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall get_State(long* plObjState/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall _xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall _xClone(void);
  HRESULT         __fastcall UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/);
  Ador_tlb::CursorLocationEnum __fastcall get_CursorLocation(void);
  HRESULT         __fastcall set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/);
  HRESULT         __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                           Ador_tlb::Recordset15** ppiRs/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/= TNoParam());
  HRESULT         __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                                      VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/);
  HRESULT         __fastcall get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Collect(VARIANT Index/*[in]*/);
  HRESULT         __fastcall set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/);
  Ador_tlb::MarshalOptionsEnum __fastcall get_MarshalOptions(void);
  HRESULT         __fastcall set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/);
  HRESULT         __fastcall Find(BSTR Criteria/*[in]*/, 
                                  Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                                  Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());

  __property   Ador_tlb::PositionEnum_Param AbsolutePosition = {read = get_AbsolutePosition, write = set_AbsolutePosition};
  __property   LPDISPATCH      ActiveConnection = {write = _set_ActiveConnection};
  __property   TOLEBOOL        BOF = {read = get_BOF};
  __property   long            CacheSize = {read = get_CacheSize, write = set_CacheSize};
  __property   Ador_tlb::CursorTypeEnum CursorType = {read = get_CursorType, write = set_CursorType};
  __property   TOLEBOOL        EOF_ = {read = get_EOF_};
  __property   Ador_tlb::Fields15Ptr Fields = {read = get_Fields};
  __property   Ador_tlb::LockTypeEnum LockType = {read = get_LockType, write = set_LockType};
  __property   Ador_tlb::ADO_LONGPTR MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Ador_tlb::ADO_LONGPTR RecordCount = {read = get_RecordCount};
  __property   LPDISPATCH      Source = {write = _set_Source};
  __property   Ador_tlb::PositionEnum_Param AbsolutePage = {read = get_AbsolutePage, write = set_AbsolutePage};
  __property   Ador_tlb::EditModeEnum EditMode = {read = get_EditMode};
  __property   Ador_tlb::ADO_LONGPTR PageCount = {read = get_PageCount};
  __property   long            PageSize = {read = get_PageSize, write = set_PageSize};
  __property   BSTR            Sort = {read = get_Sort};
  __property   long            Status = {read = get_Status};
  __property   long            State = {read = get_State};
  __property   Ador_tlb::CursorLocationEnum CursorLocation = {read = get_CursorLocation, write = set_CursorLocation};
  __property   Ador_tlb::MarshalOptionsEnum MarshalOptions = {read = get_MarshalOptions, write = set_MarshalOptions};
};
typedef TCOMRecordset15T<Recordset15> TCOMRecordset15;

// *********************************************************************//
// DispIntf:  Recordset15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000050E-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Recordset15DispT : public TAutoDriver<Recordset15>
{
public:
  Recordset15DispT(){}

  Recordset15DispT(Recordset15 *pintf)
  {
    TAutoDriver<Recordset15>::Bind(pintf, false);
  }

  Recordset15DispT(Recordset15Ptr pintf)
  {
    TAutoDriver<Recordset15>::Bind(pintf, true);
  }

  Recordset15DispT& operator=(Recordset15 *pintf)
  {
    TAutoDriver<Recordset15>::Bind(pintf, false);
    return *this;
  }

  Recordset15DispT& operator=(Recordset15Ptr pintf)
  {
    TAutoDriver<Recordset15>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Recordset));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Recordset);
  }

  HRESULT         __fastcall get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePosition(void);
  HRESULT         __fastcall set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall _set_ActiveConnection(LPDISPATCH pvar/*[in]*/);
  HRESULT         __fastcall set_ActiveConnection(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_ActiveConnection(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_ActiveConnection(void);
  HRESULT         __fastcall get_BOF(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BOF(void);
  HRESULT         __fastcall get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/);
  VARIANT         __fastcall get_Bookmark(void);
  HRESULT         __fastcall set_Bookmark(VARIANT pvBookmark/*[in]*/);
  HRESULT         __fastcall get_CacheSize(long* pl/*[out,retval]*/);
  long            __fastcall get_CacheSize(void);
  HRESULT         __fastcall set_CacheSize(long pl/*[in]*/);
  HRESULT         __fastcall get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/);
  Ador_tlb::CursorTypeEnum __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/);
  HRESULT         __fastcall get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/);
  Ador_tlb::Fields15* __fastcall get_Fields(void);
  HRESULT         __fastcall get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/);
  Ador_tlb::LockTypeEnum __fastcall get_LockType(void);
  HRESULT         __fastcall set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/);
  HRESULT         __fastcall get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_MaxRecords(void);
  HRESULT         __fastcall set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/);
  HRESULT         __fastcall get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_RecordCount(void);
  HRESULT         __fastcall _set_Source(LPDISPATCH pvSource/*[in]*/);
  HRESULT         __fastcall set_Source(BSTR pvSource/*[in]*/);
  HRESULT         __fastcall get_Source(VARIANT* pvSource/*[out,retval]*/);
  VARIANT         __fastcall get_Source(void);
  HRESULT         __fastcall AddNew(VARIANT FieldList/*[in,opt]*/= TNoParam(), 
                                    VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CancelUpdate();
  HRESULT         __fastcall Close();
  HRESULT         __fastcall Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                                     VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetRows(long Rows/*[in,def,opt]*/, 
                                     VARIANT Start/*[in,opt]*/= TNoParam(), 
                                     VARIANT Fields/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall MoveNext();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                                  Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                                  Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                  long Options/*[in,def,opt]*/);
  HRESULT         __fastcall Requery(long Options/*[in,def,opt]*/);
  HRESULT         __fastcall _xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall _Update(VARIANT Fields/*[in,opt]*/= TNoParam(), 
                                     VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePage(void);
  HRESULT         __fastcall set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/);
  Ador_tlb::EditModeEnum __fastcall get_EditMode(void);
  HRESULT         __fastcall get_Filter(VARIANT* Criteria/*[out,retval]*/);
  VARIANT         __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(VARIANT Criteria/*[in]*/);
  HRESULT         __fastcall get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_PageCount(void);
  HRESULT         __fastcall get_PageSize(long* pl/*[out,retval]*/);
  long            __fastcall get_PageSize(void);
  HRESULT         __fastcall set_PageSize(long pl/*[in]*/);
  HRESULT         __fastcall get_Sort(BSTR* Criteria/*[out,retval]*/);
  BSTR            __fastcall get_Sort(void);
  HRESULT         __fastcall set_Sort(BSTR Criteria/*[in]*/);
  HRESULT         __fastcall get_Status(long* pl/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall get_State(long* plObjState/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall _xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall _xClone(void);
  HRESULT         __fastcall UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/);
  Ador_tlb::CursorLocationEnum __fastcall get_CursorLocation(void);
  HRESULT         __fastcall set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/);
  HRESULT         __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                           Ador_tlb::Recordset15** ppiRs/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/= TNoParam());
  HRESULT         __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                                      VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/);
  HRESULT         __fastcall get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Collect(VARIANT Index/*[in]*/);
  HRESULT         __fastcall set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/);
  Ador_tlb::MarshalOptionsEnum __fastcall get_MarshalOptions(void);
  HRESULT         __fastcall set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/);
  HRESULT         __fastcall Find(BSTR Criteria/*[in]*/, 
                                  Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                                  Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   Ador_tlb::PositionEnum_Param AbsolutePosition = {read = get_AbsolutePosition, write = set_AbsolutePosition};
  __property   LPDISPATCH      ActiveConnection = {write = _set_ActiveConnection};
  __property   VARIANT_BOOL    BOF = {read = get_BOF};
  __property   long            CacheSize = {read = get_CacheSize, write = set_CacheSize};
  __property   Ador_tlb::CursorTypeEnum CursorType = {read = get_CursorType, write = set_CursorType};
  __property   VARIANT_BOOL    EOF_ = {read = get_EOF_};
  __property   Ador_tlb::Fields15* Fields = {read = get_Fields};
  __property   Ador_tlb::LockTypeEnum LockType = {read = get_LockType, write = set_LockType};
  __property   Ador_tlb::ADO_LONGPTR MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Ador_tlb::ADO_LONGPTR RecordCount = {read = get_RecordCount};
  __property   LPDISPATCH      Source = {write = _set_Source};
  __property   Ador_tlb::PositionEnum_Param AbsolutePage = {read = get_AbsolutePage, write = set_AbsolutePage};
  __property   Ador_tlb::EditModeEnum EditMode = {read = get_EditMode};
  __property   Ador_tlb::ADO_LONGPTR PageCount = {read = get_PageCount};
  __property   long            PageSize = {read = get_PageSize, write = set_PageSize};
  __property   BSTR            Sort = {read = get_Sort};
  __property   long            Status = {read = get_Status};
  __property   long            State = {read = get_State};
  __property   Ador_tlb::CursorLocationEnum CursorLocation = {read = get_CursorLocation, write = set_CursorLocation};
  __property   Ador_tlb::MarshalOptionsEnum MarshalOptions = {read = get_MarshalOptions, write = set_MarshalOptions};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef Recordset15DispT<Recordset15> Recordset15Disp;

typedef TComInterface<Recordset20>  TCOMRecordset20;

// *********************************************************************//
// DispIntf:  Recordset20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054F-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Recordset20DispT : public TAutoDriver<Recordset20>
{
public:
  Recordset20DispT(){}

  Recordset20DispT(Recordset20 *pintf)
  {
    TAutoDriver<Recordset20>::Bind(pintf, false);
  }

  Recordset20DispT(Recordset20Ptr pintf)
  {
    TAutoDriver<Recordset20>::Bind(pintf, true);
  }

  Recordset20DispT& operator=(Recordset20 *pintf)
  {
    TAutoDriver<Recordset20>::Bind(pintf, false);
    return *this;
  }

  Recordset20DispT& operator=(Recordset20Ptr pintf)
  {
    TAutoDriver<Recordset20>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_DataSource(void);
  HRESULT         __fastcall _set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/);
  HRESULT         __fastcall _xSave(BSTR FileName/*[in,def,opt]*/, 
                                    Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/);
  HRESULT         __fastcall get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveCommand(void);
  HRESULT         __fastcall set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/);
  HRESULT         __fastcall get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StayInSync(void);
  HRESULT         __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                       long NumRows/*[in,def,opt]*/, 
                                       BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                       BSTR RowDelimeter/*[in,def,opt]*/, 
                                       BSTR NullExpr/*[in,def,opt]*/, 
                                       BSTR* pRetString/*[out,retval]*/);
  BSTR            __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                       long NumRows/*[in,def,opt]*/, 
                                       BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                       BSTR RowDelimeter/*[in,def,opt]*/, 
                                       BSTR NullExpr/*[in,def,opt]*/);
  HRESULT         __fastcall get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/);
  BSTR            __fastcall get_DataMember(void);
  HRESULT         __fastcall set_DataMember(BSTR pbstrDataMember/*[in]*/);
  HRESULT         __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/, 
                                              Ador_tlb::CompareEnum* pCompare/*[out,retval]*/);
  Ador_tlb::CompareEnum __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, 
                                                    VARIANT Bookmark2/*[in]*/);
  HRESULT         __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                   Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/);
  HRESULT         __fastcall Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                                    Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/);
  HRESULT         __fastcall get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePosition(void);
  HRESULT         __fastcall set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall _set_ActiveConnection(LPDISPATCH pvar/*[in]*/);
  HRESULT         __fastcall set_ActiveConnection(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_ActiveConnection(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_ActiveConnection(void);
  HRESULT         __fastcall get_BOF(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BOF(void);
  HRESULT         __fastcall get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/);
  VARIANT         __fastcall get_Bookmark(void);
  HRESULT         __fastcall set_Bookmark(VARIANT pvBookmark/*[in]*/);
  HRESULT         __fastcall get_CacheSize(long* pl/*[out,retval]*/);
  long            __fastcall get_CacheSize(void);
  HRESULT         __fastcall set_CacheSize(long pl/*[in]*/);
  HRESULT         __fastcall get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/);
  Ador_tlb::CursorTypeEnum __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/);
  HRESULT         __fastcall get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/);
  Ador_tlb::Fields15* __fastcall get_Fields(void);
  HRESULT         __fastcall get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/);
  Ador_tlb::LockTypeEnum __fastcall get_LockType(void);
  HRESULT         __fastcall set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/);
  HRESULT         __fastcall get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_MaxRecords(void);
  HRESULT         __fastcall set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/);
  HRESULT         __fastcall get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_RecordCount(void);
  HRESULT         __fastcall _set_Source(LPDISPATCH pvSource/*[in]*/);
  HRESULT         __fastcall set_Source(BSTR pvSource/*[in]*/);
  HRESULT         __fastcall get_Source(VARIANT* pvSource/*[out,retval]*/);
  VARIANT         __fastcall get_Source(void);
  HRESULT         __fastcall AddNew(VARIANT FieldList/*[in,opt]*/= TNoParam(), 
                                    VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CancelUpdate();
  HRESULT         __fastcall Close();
  HRESULT         __fastcall Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                                     VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetRows(long Rows/*[in,def,opt]*/, 
                                     VARIANT Start/*[in,opt]*/= TNoParam(), 
                                     VARIANT Fields/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall MoveNext();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                                  Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                                  Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                  long Options/*[in,def,opt]*/);
  HRESULT         __fastcall Requery(long Options/*[in,def,opt]*/);
  HRESULT         __fastcall _xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall _Update(VARIANT Fields/*[in,opt]*/= TNoParam(), 
                                     VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePage(void);
  HRESULT         __fastcall set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/);
  Ador_tlb::EditModeEnum __fastcall get_EditMode(void);
  HRESULT         __fastcall get_Filter(VARIANT* Criteria/*[out,retval]*/);
  VARIANT         __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(VARIANT Criteria/*[in]*/);
  HRESULT         __fastcall get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_PageCount(void);
  HRESULT         __fastcall get_PageSize(long* pl/*[out,retval]*/);
  long            __fastcall get_PageSize(void);
  HRESULT         __fastcall set_PageSize(long pl/*[in]*/);
  HRESULT         __fastcall get_Sort(BSTR* Criteria/*[out,retval]*/);
  BSTR            __fastcall get_Sort(void);
  HRESULT         __fastcall set_Sort(BSTR Criteria/*[in]*/);
  HRESULT         __fastcall get_Status(long* pl/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall get_State(long* plObjState/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall _xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall _xClone(void);
  HRESULT         __fastcall UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/);
  Ador_tlb::CursorLocationEnum __fastcall get_CursorLocation(void);
  HRESULT         __fastcall set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/);
  HRESULT         __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                           Ador_tlb::Recordset15** ppiRs/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/= TNoParam());
  HRESULT         __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                                      VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/);
  HRESULT         __fastcall get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Collect(VARIANT Index/*[in]*/);
  HRESULT         __fastcall set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/);
  Ador_tlb::MarshalOptionsEnum __fastcall get_MarshalOptions(void);
  HRESULT         __fastcall set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/);
  HRESULT         __fastcall Find(BSTR Criteria/*[in]*/, 
                                  Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                                  Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   LPUNKNOWN       DataSource = {read = get_DataSource, write = _set_DataSource};
  __property   LPDISPATCH      ActiveCommand = {read = get_ActiveCommand};
  __property   VARIANT_BOOL    StayInSync = {read = get_StayInSync, write = set_StayInSync};
  __property   BSTR            DataMember = {read = get_DataMember};

  __property   Ador_tlb::PositionEnum_Param AbsolutePosition = {read = get_AbsolutePosition, write = set_AbsolutePosition};
  __property   LPDISPATCH      ActiveConnection = {write = _set_ActiveConnection};
  __property   VARIANT_BOOL    BOF = {read = get_BOF};
  __property   long            CacheSize = {read = get_CacheSize, write = set_CacheSize};
  __property   Ador_tlb::CursorTypeEnum CursorType = {read = get_CursorType, write = set_CursorType};
  __property   VARIANT_BOOL    EOF_ = {read = get_EOF_};
  __property   Ador_tlb::Fields15* Fields = {read = get_Fields};
  __property   Ador_tlb::LockTypeEnum LockType = {read = get_LockType, write = set_LockType};
  __property   Ador_tlb::ADO_LONGPTR MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Ador_tlb::ADO_LONGPTR RecordCount = {read = get_RecordCount};
  __property   LPDISPATCH      Source = {write = _set_Source};
  __property   Ador_tlb::PositionEnum_Param AbsolutePage = {read = get_AbsolutePage, write = set_AbsolutePage};
  __property   Ador_tlb::EditModeEnum EditMode = {read = get_EditMode};
  __property   Ador_tlb::ADO_LONGPTR PageCount = {read = get_PageCount};
  __property   long            PageSize = {read = get_PageSize, write = set_PageSize};
  __property   BSTR            Sort = {read = get_Sort};
  __property   long            Status = {read = get_Status};
  __property   long            State = {read = get_State};
  __property   Ador_tlb::CursorLocationEnum CursorLocation = {read = get_CursorLocation, write = set_CursorLocation};
  __property   Ador_tlb::MarshalOptionsEnum MarshalOptions = {read = get_MarshalOptions, write = set_MarshalOptions};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef Recordset20DispT<Recordset20> Recordset20Disp;

typedef TComInterface<Recordset21>  TCOMRecordset21;

// *********************************************************************//
// DispIntf:  Recordset21
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000555-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Recordset21DispT : public TAutoDriver<Recordset21>
{
public:
  Recordset21DispT(){}

  Recordset21DispT(Recordset21 *pintf)
  {
    TAutoDriver<Recordset21>::Bind(pintf, false);
  }

  Recordset21DispT(Recordset21Ptr pintf)
  {
    TAutoDriver<Recordset21>::Bind(pintf, true);
  }

  Recordset21DispT& operator=(Recordset21 *pintf)
  {
    TAutoDriver<Recordset21>::Bind(pintf, false);
    return *this;
  }

  Recordset21DispT& operator=(Recordset21Ptr pintf)
  {
    TAutoDriver<Recordset21>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Seek(VARIANT KeyValues/*[in]*/, 
                                  Ador_tlb::SeekEnum SeekOption/*[in,def,opt]*/);
  HRESULT         __fastcall set_Index(BSTR pbstrIndex/*[in]*/);
  HRESULT         __fastcall get_Index(BSTR* pbstrIndex/*[out,retval]*/);
  BSTR            __fastcall get_Index(void);
  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_DataSource(void);
  HRESULT         __fastcall _set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/);
  HRESULT         __fastcall _xSave(BSTR FileName/*[in,def,opt]*/, 
                                    Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/);
  HRESULT         __fastcall get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveCommand(void);
  HRESULT         __fastcall set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/);
  HRESULT         __fastcall get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StayInSync(void);
  HRESULT         __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                       long NumRows/*[in,def,opt]*/, 
                                       BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                       BSTR RowDelimeter/*[in,def,opt]*/, 
                                       BSTR NullExpr/*[in,def,opt]*/, 
                                       BSTR* pRetString/*[out,retval]*/);
  BSTR            __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                       long NumRows/*[in,def,opt]*/, 
                                       BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                       BSTR RowDelimeter/*[in,def,opt]*/, 
                                       BSTR NullExpr/*[in,def,opt]*/);
  HRESULT         __fastcall get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/);
  BSTR            __fastcall get_DataMember(void);
  HRESULT         __fastcall set_DataMember(BSTR pbstrDataMember/*[in]*/);
  HRESULT         __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/, 
                                              Ador_tlb::CompareEnum* pCompare/*[out,retval]*/);
  Ador_tlb::CompareEnum __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, 
                                                    VARIANT Bookmark2/*[in]*/);
  HRESULT         __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                   Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/);
  HRESULT         __fastcall Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                                    Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/);
  HRESULT         __fastcall get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePosition(void);
  HRESULT         __fastcall set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall _set_ActiveConnection(LPDISPATCH pvar/*[in]*/);
  HRESULT         __fastcall set_ActiveConnection(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_ActiveConnection(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_ActiveConnection(void);
  HRESULT         __fastcall get_BOF(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BOF(void);
  HRESULT         __fastcall get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/);
  VARIANT         __fastcall get_Bookmark(void);
  HRESULT         __fastcall set_Bookmark(VARIANT pvBookmark/*[in]*/);
  HRESULT         __fastcall get_CacheSize(long* pl/*[out,retval]*/);
  long            __fastcall get_CacheSize(void);
  HRESULT         __fastcall set_CacheSize(long pl/*[in]*/);
  HRESULT         __fastcall get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/);
  Ador_tlb::CursorTypeEnum __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/);
  HRESULT         __fastcall get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/);
  Ador_tlb::Fields15* __fastcall get_Fields(void);
  HRESULT         __fastcall get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/);
  Ador_tlb::LockTypeEnum __fastcall get_LockType(void);
  HRESULT         __fastcall set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/);
  HRESULT         __fastcall get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_MaxRecords(void);
  HRESULT         __fastcall set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/);
  HRESULT         __fastcall get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_RecordCount(void);
  HRESULT         __fastcall _set_Source(LPDISPATCH pvSource/*[in]*/);
  HRESULT         __fastcall set_Source(BSTR pvSource/*[in]*/);
  HRESULT         __fastcall get_Source(VARIANT* pvSource/*[out,retval]*/);
  VARIANT         __fastcall get_Source(void);
  HRESULT         __fastcall AddNew(VARIANT FieldList/*[in,opt]*/= TNoParam(), 
                                    VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CancelUpdate();
  HRESULT         __fastcall Close();
  HRESULT         __fastcall Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                                     VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetRows(long Rows/*[in,def,opt]*/, 
                                     VARIANT Start/*[in,opt]*/= TNoParam(), 
                                     VARIANT Fields/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall MoveNext();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                                  Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                                  Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                  long Options/*[in,def,opt]*/);
  HRESULT         __fastcall Requery(long Options/*[in,def,opt]*/);
  HRESULT         __fastcall _xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall _Update(VARIANT Fields/*[in,opt]*/= TNoParam(), 
                                     VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePage(void);
  HRESULT         __fastcall set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/);
  Ador_tlb::EditModeEnum __fastcall get_EditMode(void);
  HRESULT         __fastcall get_Filter(VARIANT* Criteria/*[out,retval]*/);
  VARIANT         __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(VARIANT Criteria/*[in]*/);
  HRESULT         __fastcall get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_PageCount(void);
  HRESULT         __fastcall get_PageSize(long* pl/*[out,retval]*/);
  long            __fastcall get_PageSize(void);
  HRESULT         __fastcall set_PageSize(long pl/*[in]*/);
  HRESULT         __fastcall get_Sort(BSTR* Criteria/*[out,retval]*/);
  BSTR            __fastcall get_Sort(void);
  HRESULT         __fastcall set_Sort(BSTR Criteria/*[in]*/);
  HRESULT         __fastcall get_Status(long* pl/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall get_State(long* plObjState/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall _xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall _xClone(void);
  HRESULT         __fastcall UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/);
  Ador_tlb::CursorLocationEnum __fastcall get_CursorLocation(void);
  HRESULT         __fastcall set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/);
  HRESULT         __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                           Ador_tlb::Recordset15** ppiRs/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/= TNoParam());
  HRESULT         __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                                      VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/);
  HRESULT         __fastcall get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Collect(VARIANT Index/*[in]*/);
  HRESULT         __fastcall set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/);
  Ador_tlb::MarshalOptionsEnum __fastcall get_MarshalOptions(void);
  HRESULT         __fastcall set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/);
  HRESULT         __fastcall Find(BSTR Criteria/*[in]*/, 
                                  Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                                  Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   BSTR            Index = {read = get_Index, write = set_Index};

  __property   LPUNKNOWN       DataSource = {read = get_DataSource, write = _set_DataSource};
  __property   LPDISPATCH      ActiveCommand = {read = get_ActiveCommand};
  __property   VARIANT_BOOL    StayInSync = {read = get_StayInSync, write = set_StayInSync};
  __property   BSTR            DataMember = {read = get_DataMember};

  __property   Ador_tlb::PositionEnum_Param AbsolutePosition = {read = get_AbsolutePosition, write = set_AbsolutePosition};
  __property   LPDISPATCH      ActiveConnection = {write = _set_ActiveConnection};
  __property   VARIANT_BOOL    BOF = {read = get_BOF};
  __property   long            CacheSize = {read = get_CacheSize, write = set_CacheSize};
  __property   Ador_tlb::CursorTypeEnum CursorType = {read = get_CursorType, write = set_CursorType};
  __property   VARIANT_BOOL    EOF_ = {read = get_EOF_};
  __property   Ador_tlb::Fields15* Fields = {read = get_Fields};
  __property   Ador_tlb::LockTypeEnum LockType = {read = get_LockType, write = set_LockType};
  __property   Ador_tlb::ADO_LONGPTR MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Ador_tlb::ADO_LONGPTR RecordCount = {read = get_RecordCount};
  __property   LPDISPATCH      Source = {write = _set_Source};
  __property   Ador_tlb::PositionEnum_Param AbsolutePage = {read = get_AbsolutePage, write = set_AbsolutePage};
  __property   Ador_tlb::EditModeEnum EditMode = {read = get_EditMode};
  __property   Ador_tlb::ADO_LONGPTR PageCount = {read = get_PageCount};
  __property   long            PageSize = {read = get_PageSize, write = set_PageSize};
  __property   BSTR            Sort = {read = get_Sort};
  __property   long            Status = {read = get_Status};
  __property   long            State = {read = get_State};
  __property   Ador_tlb::CursorLocationEnum CursorLocation = {read = get_CursorLocation, write = set_CursorLocation};
  __property   Ador_tlb::MarshalOptionsEnum MarshalOptions = {read = get_MarshalOptions, write = set_MarshalOptions};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef Recordset21DispT<Recordset21> Recordset21Disp;

typedef TComInterface<_Recordset>  TCOM_Recordset;

// *********************************************************************//
// DispIntf:  _Recordset
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000556-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class _RecordsetDispT : public TAutoDriver<_Recordset>
{
public:
  _RecordsetDispT(){}

  _RecordsetDispT(_Recordset *pintf)
  {
    TAutoDriver<_Recordset>::Bind(pintf, false);
  }

  _RecordsetDispT(_RecordsetPtr pintf)
  {
    TAutoDriver<_Recordset>::Bind(pintf, true);
  }

  _RecordsetDispT& operator=(_Recordset *pintf)
  {
    TAutoDriver<_Recordset>::Bind(pintf, false);
    return *this;
  }

  _RecordsetDispT& operator=(_RecordsetPtr pintf)
  {
    TAutoDriver<_Recordset>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Save(VARIANT Destination/*[in,opt]*/, 
                                  Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/);
  HRESULT         __fastcall Seek(VARIANT KeyValues/*[in]*/, 
                                  Ador_tlb::SeekEnum SeekOption/*[in,def,opt]*/);
  HRESULT         __fastcall set_Index(BSTR pbstrIndex/*[in]*/);
  HRESULT         __fastcall get_Index(BSTR* pbstrIndex/*[out,retval]*/);
  BSTR            __fastcall get_Index(void);
  HRESULT         __fastcall Cancel();
  HRESULT         __fastcall get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_DataSource(void);
  HRESULT         __fastcall _set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/);
  HRESULT         __fastcall _xSave(BSTR FileName/*[in,def,opt]*/, 
                                    Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/);
  HRESULT         __fastcall get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/);
  LPDISPATCH      __fastcall get_ActiveCommand(void);
  HRESULT         __fastcall set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/);
  HRESULT         __fastcall get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_StayInSync(void);
  HRESULT         __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                       long NumRows/*[in,def,opt]*/, 
                                       BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                       BSTR RowDelimeter/*[in,def,opt]*/, 
                                       BSTR NullExpr/*[in,def,opt]*/, 
                                       BSTR* pRetString/*[out,retval]*/);
  BSTR            __fastcall GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                                       long NumRows/*[in,def,opt]*/, 
                                       BSTR ColumnDelimeter/*[in,def,opt]*/, 
                                       BSTR RowDelimeter/*[in,def,opt]*/, 
                                       BSTR NullExpr/*[in,def,opt]*/);
  HRESULT         __fastcall get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/);
  BSTR            __fastcall get_DataMember(void);
  HRESULT         __fastcall set_DataMember(BSTR pbstrDataMember/*[in]*/);
  HRESULT         __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/, 
                                              Ador_tlb::CompareEnum* pCompare/*[out,retval]*/);
  Ador_tlb::CompareEnum __fastcall CompareBookmarks(VARIANT Bookmark1/*[in]*/, 
                                                    VARIANT Bookmark2/*[in]*/);
  HRESULT         __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                   Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/);
  HRESULT         __fastcall Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                                    Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/);
  HRESULT         __fastcall get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePosition(void);
  HRESULT         __fastcall set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall _set_ActiveConnection(LPDISPATCH pvar/*[in]*/);
  HRESULT         __fastcall set_ActiveConnection(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_ActiveConnection(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_ActiveConnection(void);
  HRESULT         __fastcall get_BOF(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BOF(void);
  HRESULT         __fastcall get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/);
  VARIANT         __fastcall get_Bookmark(void);
  HRESULT         __fastcall set_Bookmark(VARIANT pvBookmark/*[in]*/);
  HRESULT         __fastcall get_CacheSize(long* pl/*[out,retval]*/);
  long            __fastcall get_CacheSize(void);
  HRESULT         __fastcall set_CacheSize(long pl/*[in]*/);
  HRESULT         __fastcall get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/);
  Ador_tlb::CursorTypeEnum __fastcall get_CursorType(void);
  HRESULT         __fastcall set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/);
  HRESULT         __fastcall get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_EOF_(void);
  HRESULT         __fastcall get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/);
  Ador_tlb::Fields15* __fastcall get_Fields(void);
  HRESULT         __fastcall get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/);
  Ador_tlb::LockTypeEnum __fastcall get_LockType(void);
  HRESULT         __fastcall set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/);
  HRESULT         __fastcall get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_MaxRecords(void);
  HRESULT         __fastcall set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/);
  HRESULT         __fastcall get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_RecordCount(void);
  HRESULT         __fastcall _set_Source(LPDISPATCH pvSource/*[in]*/);
  HRESULT         __fastcall set_Source(BSTR pvSource/*[in]*/);
  HRESULT         __fastcall get_Source(VARIANT* pvSource/*[out,retval]*/);
  VARIANT         __fastcall get_Source(void);
  HRESULT         __fastcall AddNew(VARIANT FieldList/*[in,opt]*/= TNoParam(), 
                                    VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall CancelUpdate();
  HRESULT         __fastcall Close();
  HRESULT         __fastcall Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                                     VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetRows(long Rows/*[in,def,opt]*/, 
                                     VARIANT Start/*[in,opt]*/= TNoParam(), 
                                     VARIANT Fields/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall MoveNext();
  HRESULT         __fastcall MovePrevious();
  HRESULT         __fastcall MoveFirst();
  HRESULT         __fastcall MoveLast();
  HRESULT         __fastcall Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                                  Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                                  Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                                  long Options/*[in,def,opt]*/);
  HRESULT         __fastcall Requery(long Options/*[in,def,opt]*/);
  HRESULT         __fastcall _xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall _Update(VARIANT Fields/*[in,opt]*/= TNoParam(), 
                                     VARIANT Values/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/);
  Ador_tlb::PositionEnum_Param __fastcall get_AbsolutePage(void);
  HRESULT         __fastcall set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/);
  HRESULT         __fastcall get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/);
  Ador_tlb::EditModeEnum __fastcall get_EditMode(void);
  HRESULT         __fastcall get_Filter(VARIANT* Criteria/*[out,retval]*/);
  VARIANT         __fastcall get_Filter(void);
  HRESULT         __fastcall set_Filter(VARIANT Criteria/*[in]*/);
  HRESULT         __fastcall get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_PageCount(void);
  HRESULT         __fastcall get_PageSize(long* pl/*[out,retval]*/);
  long            __fastcall get_PageSize(void);
  HRESULT         __fastcall set_PageSize(long pl/*[in]*/);
  HRESULT         __fastcall get_Sort(BSTR* Criteria/*[out,retval]*/);
  BSTR            __fastcall get_Sort(void);
  HRESULT         __fastcall set_Sort(BSTR Criteria/*[in]*/);
  HRESULT         __fastcall get_Status(long* pl/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall get_State(long* plObjState/*[out,retval]*/);
  long            __fastcall get_State(void);
  HRESULT         __fastcall _xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall _xClone(void);
  HRESULT         __fastcall UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/);
  HRESULT         __fastcall get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/);
  Ador_tlb::CursorLocationEnum __fastcall get_CursorLocation(void);
  HRESULT         __fastcall set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/);
  HRESULT         __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                           Ador_tlb::Recordset15** ppiRs/*[out,retval]*/);
  Ador_tlb::Recordset15* __fastcall NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/= TNoParam());
  HRESULT         __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                                      VARIANT_BOOL* pb/*[out,retval]*/);
  VARIANT_BOOL    __fastcall Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/);
  HRESULT         __fastcall get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Collect(VARIANT Index/*[in]*/);
  HRESULT         __fastcall set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/);
  Ador_tlb::MarshalOptionsEnum __fastcall get_MarshalOptions(void);
  HRESULT         __fastcall set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/);
  HRESULT         __fastcall Find(BSTR Criteria/*[in]*/, 
                                  Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                                  Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                                  VARIANT Start/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);


  __property   BSTR            Index = {read = get_Index, write = set_Index};

  __property   LPUNKNOWN       DataSource = {read = get_DataSource, write = _set_DataSource};
  __property   LPDISPATCH      ActiveCommand = {read = get_ActiveCommand};
  __property   VARIANT_BOOL    StayInSync = {read = get_StayInSync, write = set_StayInSync};
  __property   BSTR            DataMember = {read = get_DataMember};

  __property   Ador_tlb::PositionEnum_Param AbsolutePosition = {read = get_AbsolutePosition, write = set_AbsolutePosition};
  __property   LPDISPATCH      ActiveConnection = {write = _set_ActiveConnection};
  __property   VARIANT_BOOL    BOF = {read = get_BOF};
  __property   long            CacheSize = {read = get_CacheSize, write = set_CacheSize};
  __property   Ador_tlb::CursorTypeEnum CursorType = {read = get_CursorType, write = set_CursorType};
  __property   VARIANT_BOOL    EOF_ = {read = get_EOF_};
  __property   Ador_tlb::Fields15* Fields = {read = get_Fields};
  __property   Ador_tlb::LockTypeEnum LockType = {read = get_LockType, write = set_LockType};
  __property   Ador_tlb::ADO_LONGPTR MaxRecords = {read = get_MaxRecords, write = set_MaxRecords};
  __property   Ador_tlb::ADO_LONGPTR RecordCount = {read = get_RecordCount};
  __property   LPDISPATCH      Source = {write = _set_Source};
  __property   Ador_tlb::PositionEnum_Param AbsolutePage = {read = get_AbsolutePage, write = set_AbsolutePage};
  __property   Ador_tlb::EditModeEnum EditMode = {read = get_EditMode};
  __property   Ador_tlb::ADO_LONGPTR PageCount = {read = get_PageCount};
  __property   long            PageSize = {read = get_PageSize, write = set_PageSize};
  __property   BSTR            Sort = {read = get_Sort};
  __property   long            Status = {read = get_Status};
  __property   long            State = {read = get_State};
  __property   Ador_tlb::CursorLocationEnum CursorLocation = {read = get_CursorLocation, write = set_CursorLocation};
  __property   Ador_tlb::MarshalOptionsEnum MarshalOptions = {read = get_MarshalOptions, write = set_MarshalOptions};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef _RecordsetDispT<_Recordset> _RecordsetDisp;

typedef TComInterface<Fields15>  TCOMFields15;

// *********************************************************************//
// DispIntf:  Fields15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000506-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Fields15DispT : public TAutoDriver<Fields15>
{
public:
  Fields15DispT(){}

  Fields15DispT(Fields15 *pintf)
  {
    TAutoDriver<Fields15>::Bind(pintf, false);
  }

  Fields15DispT(Fields15Ptr pintf)
  {
    TAutoDriver<Fields15>::Bind(pintf, true);
  }

  Fields15DispT& operator=(Fields15 *pintf)
  {
    TAutoDriver<Fields15>::Bind(pintf, false);
    return *this;
  }

  Fields15DispT& operator=(Fields15Ptr pintf)
  {
    TAutoDriver<Fields15>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ador_tlb::Field20** ppvObject/*[out,retval]*/);
  Ador_tlb::Field20* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* c/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Refresh();


  __property   long            Count = {read = get_Count};
};
typedef Fields15DispT<Fields15> Fields15Disp;

typedef TComInterface<Fields20>  TCOMFields20;

// *********************************************************************//
// DispIntf:  Fields20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054D-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Fields20DispT : public TAutoDriver<Fields20>
{
public:
  Fields20DispT(){}

  Fields20DispT(Fields20 *pintf)
  {
    TAutoDriver<Fields20>::Bind(pintf, false);
  }

  Fields20DispT(Fields20Ptr pintf)
  {
    TAutoDriver<Fields20>::Bind(pintf, true);
  }

  Fields20DispT& operator=(Fields20 *pintf)
  {
    TAutoDriver<Fields20>::Bind(pintf, false);
    return *this;
  }

  Fields20DispT& operator=(Fields20Ptr pintf)
  {
    TAutoDriver<Fields20>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall _Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                                     Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                                     Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/);
  HRESULT         __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ador_tlb::Field20** ppvObject/*[out,retval]*/);
  Ador_tlb::Field20* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* c/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Refresh();



  __property   long            Count = {read = get_Count};
};
typedef Fields20DispT<Fields20> Fields20Disp;

typedef TComInterface<Fields>  TCOMFields;

// *********************************************************************//
// DispIntf:  Fields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000564-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class FieldsDispT : public TAutoDriver<Fields>
{
public:
  FieldsDispT(){}

  FieldsDispT(Fields *pintf)
  {
    TAutoDriver<Fields>::Bind(pintf, false);
  }

  FieldsDispT(FieldsPtr pintf)
  {
    TAutoDriver<Fields>::Bind(pintf, true);
  }

  FieldsDispT& operator=(Fields *pintf)
  {
    TAutoDriver<Fields>::Bind(pintf, false);
    return *this;
  }

  FieldsDispT& operator=(FieldsPtr pintf)
  {
    TAutoDriver<Fields>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                                    Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                                    Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/, 
                                    VARIANT FieldValue/*[in,opt]*/= TNoParam());
  HRESULT         __fastcall _Update();
  HRESULT         __fastcall Resync(Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/);
  HRESULT         __fastcall CancelUpdate();
  HRESULT         __fastcall _Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                                     Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                                     Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/);
  HRESULT         __fastcall Delete(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Item(VARIANT Index/*[in]*/, 
                                      Ador_tlb::Field20** ppvObject/*[out,retval]*/);
  Ador_tlb::Field20* __fastcall get_Item(VARIANT Index/*[in]*/);
  HRESULT         __fastcall get_Count(long* c/*[out,retval]*/);
  long            __fastcall get_Count(void);
  HRESULT         __fastcall _NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/);
  LPUNKNOWN       __fastcall _NewEnum(void);
  HRESULT         __fastcall Refresh();




  __property   long            Count = {read = get_Count};
};
typedef FieldsDispT<Fields> FieldsDisp;

typedef TComInterface<Field20>  TCOMField20;

// *********************************************************************//
// DispIntf:  Field20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054C-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Field20DispT : public TAutoDriver<Field20>
{
public:
  Field20DispT(){}

  Field20DispT(Field20 *pintf)
  {
    TAutoDriver<Field20>::Bind(pintf, false);
  }

  Field20DispT(Field20Ptr pintf)
  {
    TAutoDriver<Field20>::Bind(pintf, true);
  }

  Field20DispT& operator=(Field20 *pintf)
  {
    TAutoDriver<Field20>::Bind(pintf, false);
    return *this;
  }

  Field20DispT& operator=(Field20Ptr pintf)
  {
    TAutoDriver<Field20>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_ActualSize(void);
  HRESULT         __fastcall get_Attributes(long* pl/*[out,retval]*/);
  long            __fastcall get_Attributes(void);
  HRESULT         __fastcall get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_DefinedSize(void);
  HRESULT         __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/);
  Ador_tlb::DataTypeEnum __fastcall get_Type(void);
  HRESULT         __fastcall get_Value(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_Precision(unsigned_char* pbPrecision/*[out,retval]*/);
  unsigned_char   __fastcall get_Precision(void);
  HRESULT         __fastcall get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/);
  unsigned_char   __fastcall get_NumericScale(void);
  HRESULT         __fastcall AppendChunk(VARIANT Data/*[in]*/);
  HRESULT         __fastcall GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetChunk(long Length/*[in]*/);
  HRESULT         __fastcall get_OriginalValue(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_OriginalValue(void);
  HRESULT         __fastcall get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_UnderlyingValue(void);
  HRESULT         __fastcall get_DataFormat(LPUNKNOWN* ppiDF/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_DataFormat(void);
  HRESULT         __fastcall _set_DataFormat(LPUNKNOWN ppiDF/*[in]*/);
  HRESULT         __fastcall set_Precision(unsigned_char pbPrecision/*[in]*/);
  HRESULT         __fastcall set_NumericScale(unsigned_char pbNumericScale/*[in]*/);
  HRESULT         __fastcall set_Type(Ador_tlb::DataTypeEnum pDataType/*[in]*/);
  HRESULT         __fastcall set_DefinedSize(Ador_tlb::ADO_LONGPTR pl/*[in]*/);
  HRESULT         __fastcall set_Attributes(long pl/*[in]*/);
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   Ador_tlb::ADO_LONGPTR ActualSize = {read = get_ActualSize};
  __property   long            Attributes = {read = get_Attributes, write = set_Attributes};
  __property   Ador_tlb::ADO_LONGPTR DefinedSize = {read = get_DefinedSize, write = set_DefinedSize};
  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type, write = set_Type};
  __property   unsigned_char   Precision = {read = get_Precision, write = set_Precision};
  __property   unsigned_char   NumericScale = {read = get_NumericScale, write = set_NumericScale};
  __property   LPUNKNOWN       DataFormat = {read = get_DataFormat, write = _set_DataFormat};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef Field20DispT<Field20> Field20Disp;

typedef TComInterface<Field>  TCOMField;

// *********************************************************************//
// DispIntf:  Field
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000569-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class FieldDispT : public TAutoDriver<Field>
{
public:
  FieldDispT(){}

  FieldDispT(Field *pintf)
  {
    TAutoDriver<Field>::Bind(pintf, false);
  }

  FieldDispT(FieldPtr pintf)
  {
    TAutoDriver<Field>::Bind(pintf, true);
  }

  FieldDispT& operator=(Field *pintf)
  {
    TAutoDriver<Field>::Bind(pintf, false);
    return *this;
  }

  FieldDispT& operator=(FieldPtr pintf)
  {
    TAutoDriver<Field>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Status(long* pFStatus/*[out,retval]*/);
  long            __fastcall get_Status(void);
  HRESULT         __fastcall get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_ActualSize(void);
  HRESULT         __fastcall get_Attributes(long* pl/*[out,retval]*/);
  long            __fastcall get_Attributes(void);
  HRESULT         __fastcall get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_DefinedSize(void);
  HRESULT         __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/);
  Ador_tlb::DataTypeEnum __fastcall get_Type(void);
  HRESULT         __fastcall get_Value(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_Precision(unsigned_char* pbPrecision/*[out,retval]*/);
  unsigned_char   __fastcall get_Precision(void);
  HRESULT         __fastcall get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/);
  unsigned_char   __fastcall get_NumericScale(void);
  HRESULT         __fastcall AppendChunk(VARIANT Data/*[in]*/);
  HRESULT         __fastcall GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetChunk(long Length/*[in]*/);
  HRESULT         __fastcall get_OriginalValue(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_OriginalValue(void);
  HRESULT         __fastcall get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_UnderlyingValue(void);
  HRESULT         __fastcall get_DataFormat(LPUNKNOWN* ppiDF/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_DataFormat(void);
  HRESULT         __fastcall _set_DataFormat(LPUNKNOWN ppiDF/*[in]*/);
  HRESULT         __fastcall set_Precision(unsigned_char pbPrecision/*[in]*/);
  HRESULT         __fastcall set_NumericScale(unsigned_char pbNumericScale/*[in]*/);
  HRESULT         __fastcall set_Type(Ador_tlb::DataTypeEnum pDataType/*[in]*/);
  HRESULT         __fastcall set_DefinedSize(Ador_tlb::ADO_LONGPTR pl/*[in]*/);
  HRESULT         __fastcall set_Attributes(long pl/*[in]*/);
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   long            Status = {read = get_Status};

  __property   Ador_tlb::ADO_LONGPTR ActualSize = {read = get_ActualSize};
  __property   long            Attributes = {read = get_Attributes, write = set_Attributes};
  __property   Ador_tlb::ADO_LONGPTR DefinedSize = {read = get_DefinedSize, write = set_DefinedSize};
  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type, write = set_Type};
  __property   unsigned_char   Precision = {read = get_Precision, write = set_Precision};
  __property   unsigned_char   NumericScale = {read = get_NumericScale, write = set_NumericScale};
  __property   LPUNKNOWN       DataFormat = {read = get_DataFormat, write = _set_DataFormat};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef FieldDispT<Field> FieldDisp;

// *********************************************************************//
// DispIntf:  ADORecordsetConstruction
// Flags:     (4608) Restricted Dispatchable
// GUID:      {00000283-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class ADORecordsetConstructionDispT : public TAutoDriver<ADORecordsetConstruction>
{
public:
  ADORecordsetConstructionDispT(){}

  ADORecordsetConstructionDispT(ADORecordsetConstruction *pintf)
  {
    TAutoDriver<ADORecordsetConstruction>::Bind(pintf, false);
  }

  ADORecordsetConstructionDispT(ADORecordsetConstructionPtr pintf)
  {
    TAutoDriver<ADORecordsetConstruction>::Bind(pintf, true);
  }

  ADORecordsetConstructionDispT& operator=(ADORecordsetConstruction *pintf)
  {
    TAutoDriver<ADORecordsetConstruction>::Bind(pintf, false);
    return *this;
  }

  ADORecordsetConstructionDispT& operator=(ADORecordsetConstructionPtr pintf)
  {
    TAutoDriver<ADORecordsetConstruction>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_Rowset(LPUNKNOWN* ppRowset/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_Rowset(void);
  HRESULT         __fastcall set_Rowset(LPUNKNOWN ppRowset/*[in]*/);
  HRESULT         __fastcall get_Chapter(Ador_tlb::ADO_LONGPTR* plChapter/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_Chapter(void);
  HRESULT         __fastcall set_Chapter(Ador_tlb::ADO_LONGPTR plChapter/*[in]*/);
  HRESULT         __fastcall get_RowPosition(LPUNKNOWN* ppRowPos/*[out,retval]*/);
  LPUNKNOWN       __fastcall get_RowPosition(void);
  HRESULT         __fastcall set_RowPosition(LPUNKNOWN ppRowPos/*[in]*/);

  __property   LPUNKNOWN       Rowset = {read = get_Rowset, write = set_Rowset};
  __property   Ador_tlb::ADO_LONGPTR Chapter = {read = get_Chapter, write = set_Chapter};
  __property   LPUNKNOWN       RowPosition = {read = get_RowPosition, write = set_RowPosition};
};
typedef ADORecordsetConstructionDispT<ADORecordsetConstruction> ADORecordsetConstructionDisp;

typedef TComInterface<Field15>  TCOMField15;

// *********************************************************************//
// DispIntf:  Field15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000505-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template<class T>
class Field15DispT : public TAutoDriver<Field15>
{
public:
  Field15DispT(){}

  Field15DispT(Field15 *pintf)
  {
    TAutoDriver<Field15>::Bind(pintf, false);
  }

  Field15DispT(Field15Ptr pintf)
  {
    TAutoDriver<Field15>::Bind(pintf, true);
  }

  Field15DispT& operator=(Field15 *pintf)
  {
    TAutoDriver<Field15>::Bind(pintf, false);
    return *this;
  }

  Field15DispT& operator=(Field15Ptr pintf)
  {
    TAutoDriver<Field15>::Bind(pintf, true);
    return *this;
  }

  HRESULT         __fastcall get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_ActualSize(void);
  HRESULT         __fastcall get_Attributes(long* pl/*[out,retval]*/);
  long            __fastcall get_Attributes(void);
  HRESULT         __fastcall get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/);
  Ador_tlb::ADO_LONGPTR __fastcall get_DefinedSize(void);
  HRESULT         __fastcall get_Name(BSTR* pbstr/*[out,retval]*/);
  BSTR            __fastcall get_Name(void);
  HRESULT         __fastcall get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/);
  Ador_tlb::DataTypeEnum __fastcall get_Type(void);
  HRESULT         __fastcall get_Value(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_Value(void);
  HRESULT         __fastcall set_Value(VARIANT pvar/*[in]*/);
  HRESULT         __fastcall get_Precision(unsigned_char* pbPrecision/*[out,retval]*/);
  unsigned_char   __fastcall get_Precision(void);
  HRESULT         __fastcall get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/);
  unsigned_char   __fastcall get_NumericScale(void);
  HRESULT         __fastcall AppendChunk(VARIANT Data/*[in]*/);
  HRESULT         __fastcall GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall GetChunk(long Length/*[in]*/);
  HRESULT         __fastcall get_OriginalValue(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_OriginalValue(void);
  HRESULT         __fastcall get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/);
  VARIANT         __fastcall get_UnderlyingValue(void);
  HRESULT         __fastcall get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/);
  Ador_tlb::Properties* __fastcall get_Properties(void);

  __property   Ador_tlb::ADO_LONGPTR ActualSize = {read = get_ActualSize};
  __property   long            Attributes = {read = get_Attributes};
  __property   Ador_tlb::ADO_LONGPTR DefinedSize = {read = get_DefinedSize};
  __property   BSTR            Name = {read = get_Name};
  __property   Ador_tlb::DataTypeEnum Type = {read = get_Type};
  __property   unsigned_char   Precision = {read = get_Precision};
  __property   unsigned_char   NumericScale = {read = get_NumericScale};

  __property   Ador_tlb::Properties* Properties = {read = get_Properties};
};
typedef Field15DispT<Field15> Field15Disp;

// *********************************************************************//
// DispIntf:  _Collection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000512-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
_CollectionDispT<T>::get_Count(long* c/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(c /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_CollectionDispT<T>::get_Count(void)
{
  long c;
  this->get_Count((long*)&c);
  return c;
}

template <class T> HRESULT __fastcall
_CollectionDispT<T>::_NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppvObject /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_CollectionDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppvObject;
  this->_NewEnum((LPUNKNOWN*)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
_CollectionDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  _DynaCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000513-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
_DynaCollectionDispT<T>::Append(LPDISPATCH Object/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Append"), DISPID(DISPID_UNKNOWN/*[1610809344]*/));
  TAutoArgs<1> _args;
  _args[1] = Object /*[VT_DISPATCH:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DynaCollectionDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(DISPID_UNKNOWN/*[1610809345]*/));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_DynaCollectionDispT<T>::get_Count(long* c/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(c /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_DynaCollectionDispT<T>::get_Count(void)
{
  long c;
  this->get_Count((long*)&c);
  return c;
}

template <class T> HRESULT __fastcall
_DynaCollectionDispT<T>::_NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppvObject /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_DynaCollectionDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppvObject;
  this->_NewEnum((LPUNKNOWN*)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
_DynaCollectionDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  _ADO
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000534-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
_ADODispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
_ADODispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  Properties
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000504-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
PropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/, Ador_tlb::Property** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Property**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Property* __fastcall
PropertiesDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ador_tlb::Property* ppvObject;
  this->get_Item(Index, (Ador_tlb::Property**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
PropertiesDispT<T>::get_Count(long* c/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(c /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertiesDispT<T>::get_Count(void)
{
  long c;
  this->get_Count((long*)&c);
  return c;
}

template <class T> HRESULT __fastcall
PropertiesDispT<T>::_NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppvObject /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
PropertiesDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppvObject;
  this->_NewEnum((LPUNKNOWN*)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
PropertiesDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Property
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000503-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
PropertyDispT<T>::get_Value(VARIANT* pval/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pval /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
PropertyDispT<T>::get_Value(void)
{
  VARIANT pval;
  this->get_Value((VARIANT*)&pval);
  return pval;
}

template <class T> HRESULT __fastcall
PropertyDispT<T>::set_Value(VARIANT pval/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pval /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
PropertyDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(DISPID_UNKNOWN/*[1610743810]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
PropertyDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT __fastcall
PropertyDispT<T>::get_Type(Ador_tlb::DataTypeEnum* ptype/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(DISPID_UNKNOWN/*[1610743811]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)ptype /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::DataTypeEnum __fastcall
PropertyDispT<T>::get_Type(void)
{
  Ador_tlb::DataTypeEnum ptype;
  this->get_Type((Ador_tlb::DataTypeEnum*)&ptype);
  return ptype;
}

template <class T> HRESULT __fastcall
PropertyDispT<T>::get_Attributes(long* plAttributes/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(DISPID_UNKNOWN/*[1610743812]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plAttributes /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
PropertyDispT<T>::get_Attributes(void)
{
  long plAttributes;
  this->get_Attributes((long*)&plAttributes);
  return plAttributes;
}

template <class T> HRESULT __fastcall
PropertyDispT<T>::set_Attributes(long plAttributes/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(1610743812));
  TAutoArgs<1> _args;
  _args[1] = plAttributes /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMRecordset15
// Interface: Recordset15
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  return (*this)->get_AbsolutePosition(pl);
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
TCOMRecordset15T<T>::get_AbsolutePosition(void)
{
  Ador_tlb::PositionEnum_Param pl;
  OLECHECK(this->get_AbsolutePosition((Ador_tlb::PositionEnum_Param*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  return (*this)->set_AbsolutePosition(pl);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::_set_ActiveConnection(LPDISPATCH pvar/*[in]*/)
{
  return (*this)->_set_ActiveConnection(pvar);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_ActiveConnection(VARIANT pvar/*[in]*/)
{
  return (*this)->set_ActiveConnection(pvar);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_ActiveConnection(VARIANT* pvar/*[out,retval]*/)
{
  return (*this)->get_ActiveConnection(pvar);
}

template <class T> VARIANT __fastcall
TCOMRecordset15T<T>::get_ActiveConnection(void)
{
  VARIANT pvar;
  OLECHECK(this->get_ActiveConnection((VARIANT*)&pvar));
  return pvar;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_BOF(VARIANT_BOOL* pb/*[out,retval]*/)
{
  return (*this)->get_BOF(pb);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_BOF(TOLEBOOL* pb/*[out,retval]*/)
{
  return (*this)->get_BOF(VARIANT_BOOL*)pb);
}

template <class T> TOLEBOOL __fastcall
TCOMRecordset15T<T>::get_BOF(void)
{
  VARIANT_BOOL pb;
  OLECHECK(this->get_BOF((VARIANT_BOOL*)&pb));
  return (TOLEBOOL)pb;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/)
{
  return (*this)->get_Bookmark(pvBookmark);
}

template <class T> VARIANT __fastcall
TCOMRecordset15T<T>::get_Bookmark(void)
{
  VARIANT pvBookmark;
  OLECHECK(this->get_Bookmark((VARIANT*)&pvBookmark));
  return pvBookmark;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_Bookmark(VARIANT pvBookmark/*[in]*/)
{
  return (*this)->set_Bookmark(pvBookmark);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_CacheSize(long* pl/*[out,retval]*/)
{
  return (*this)->get_CacheSize(pl);
}

template <class T> long __fastcall
TCOMRecordset15T<T>::get_CacheSize(void)
{
  long pl;
  OLECHECK(this->get_CacheSize((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_CacheSize(long pl/*[in]*/)
{
  return (*this)->set_CacheSize(pl);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/)
{
  return (*this)->get_CursorType(plCursorType);
}

template <class T> Ador_tlb::CursorTypeEnum __fastcall
TCOMRecordset15T<T>::get_CursorType(void)
{
  Ador_tlb::CursorTypeEnum plCursorType;
  OLECHECK(this->get_CursorType((Ador_tlb::CursorTypeEnum*)&plCursorType));
  return plCursorType;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/)
{
  return (*this)->set_CursorType(plCursorType);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/)
{
  return (*this)->get_EOF_(pb);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_EOF_(TOLEBOOL* pb/*[out,retval]*/)
{
  return (*this)->get_EOF_(VARIANT_BOOL*)pb);
}

template <class T> TOLEBOOL __fastcall
TCOMRecordset15T<T>::get_EOF_(void)
{
  VARIANT_BOOL pb;
  OLECHECK(this->get_EOF_((VARIANT_BOOL*)&pb));
  return (TOLEBOOL)pb;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/)
{
  return (*this)->get_Fields(ppvObject);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Fields(Ador_tlb::Fields15Ptr* ppvObject/*[out,retval]*/)
{
  return (*this)->get_Fields(Fields15**)ppvObject);
}

template <class T> Ador_tlb::Fields15Ptr __fastcall
TCOMRecordset15T<T>::get_Fields(void)
{
  Ador_tlb::Fields15* ppvObject;
  OLECHECK(this->get_Fields((Ador_tlb::Fields15**)&ppvObject));
  return (Ador_tlb::Fields15Ptr)ppvObject;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/)
{
  return (*this)->get_LockType(plLockType);
}

template <class T> Ador_tlb::LockTypeEnum __fastcall
TCOMRecordset15T<T>::get_LockType(void)
{
  Ador_tlb::LockTypeEnum plLockType;
  OLECHECK(this->get_LockType((Ador_tlb::LockTypeEnum*)&plLockType));
  return plLockType;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/)
{
  return (*this)->set_LockType(plLockType);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/)
{
  return (*this)->get_MaxRecords(plMaxRecords);
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
TCOMRecordset15T<T>::get_MaxRecords(void)
{
  Ador_tlb::ADO_LONGPTR plMaxRecords;
  OLECHECK(this->get_MaxRecords((Ador_tlb::ADO_LONGPTR*)&plMaxRecords));
  return plMaxRecords;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/)
{
  return (*this)->set_MaxRecords(plMaxRecords);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  return (*this)->get_RecordCount(pl);
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
TCOMRecordset15T<T>::get_RecordCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  OLECHECK(this->get_RecordCount((Ador_tlb::ADO_LONGPTR*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::_set_Source(LPDISPATCH pvSource/*[in]*/)
{
  return (*this)->_set_Source(pvSource);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_Source(BSTR pvSource/*[in]*/)
{
  return (*this)->set_Source(pvSource);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Source(VARIANT* pvSource/*[out,retval]*/)
{
  return (*this)->get_Source(pvSource);
}

template <class T> VARIANT __fastcall
TCOMRecordset15T<T>::get_Source(void)
{
  VARIANT pvSource;
  OLECHECK(this->get_Source((VARIANT*)&pvSource));
  return pvSource;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::AddNew(VARIANT FieldList/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  return (*this)->AddNew(FieldList, Values);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::CancelUpdate(void)
{
  return (*this)->CancelUpdate();
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Close(void)
{
  return (*this)->Close();
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  return (*this)->Delete(AffectRecords);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/)
{
  return (*this)->GetRows(Rows, Start, Fields, pvar);
}

template <class T> VARIANT __fastcall
TCOMRecordset15T<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/)
{
  VARIANT pvar;
  OLECHECK(this->GetRows(, (VARIANT*)&pvar));
  return pvar;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, VARIANT Start/*[in,opt]*/)
{
  return (*this)->Move(NumRecords, Start);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::MoveNext(void)
{
  return (*this)->MoveNext();
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::MovePrevious(void)
{
  return (*this)->MovePrevious();
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::MoveFirst(void)
{
  return (*this)->MoveFirst();
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::MoveLast(void)
{
  return (*this)->MoveLast();
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                          Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                          Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                          long Options/*[in,def,opt]*/)
{
  return (*this)->Open(Source, ActiveConnection, CursorType, LockType, Options);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Requery(long Options/*[in,def,opt]*/)
{
  return (*this)->Requery(Options);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::_xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  return (*this)->_xResync(AffectRecords);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::_Update(VARIANT Fields/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  return (*this)->_Update(Fields, Values);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  return (*this)->get_AbsolutePage(pl);
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
TCOMRecordset15T<T>::get_AbsolutePage(void)
{
  Ador_tlb::PositionEnum_Param pl;
  OLECHECK(this->get_AbsolutePage((Ador_tlb::PositionEnum_Param*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  return (*this)->set_AbsolutePage(pl);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/)
{
  return (*this)->get_EditMode(pl);
}

template <class T> Ador_tlb::EditModeEnum __fastcall
TCOMRecordset15T<T>::get_EditMode(void)
{
  Ador_tlb::EditModeEnum pl;
  OLECHECK(this->get_EditMode((Ador_tlb::EditModeEnum*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Filter(VARIANT* Criteria/*[out,retval]*/)
{
  return (*this)->get_Filter(Criteria);
}

template <class T> VARIANT __fastcall
TCOMRecordset15T<T>::get_Filter(void)
{
  VARIANT Criteria;
  OLECHECK(this->get_Filter((VARIANT*)&Criteria));
  return Criteria;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_Filter(VARIANT Criteria/*[in]*/)
{
  return (*this)->set_Filter(Criteria);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  return (*this)->get_PageCount(pl);
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
TCOMRecordset15T<T>::get_PageCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  OLECHECK(this->get_PageCount((Ador_tlb::ADO_LONGPTR*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_PageSize(long* pl/*[out,retval]*/)
{
  return (*this)->get_PageSize(pl);
}

template <class T> long __fastcall
TCOMRecordset15T<T>::get_PageSize(void)
{
  long pl;
  OLECHECK(this->get_PageSize((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_PageSize(long pl/*[in]*/)
{
  return (*this)->set_PageSize(pl);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Sort(BSTR* Criteria/*[out,retval]*/)
{
  return (*this)->get_Sort(Criteria);
}

template <class T> BSTR __fastcall
TCOMRecordset15T<T>::get_Sort(void)
{
  BSTR Criteria = 0;
  OLECHECK(this->get_Sort((BSTR*)&Criteria));
  return Criteria;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_Sort(BSTR Criteria/*[in]*/)
{
  return (*this)->set_Sort(Criteria);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Status(long* pl/*[out,retval]*/)
{
  return (*this)->get_Status(pl);
}

template <class T> long __fastcall
TCOMRecordset15T<T>::get_Status(void)
{
  long pl;
  OLECHECK(this->get_Status((long*)&pl));
  return pl;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_State(long* plObjState/*[out,retval]*/)
{
  return (*this)->get_State(plObjState);
}

template <class T> long __fastcall
TCOMRecordset15T<T>::get_State(void)
{
  long plObjState;
  OLECHECK(this->get_State((long*)&plObjState));
  return plObjState;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::_xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  return (*this)->_xClone(ppvObject);
}

template <class T> Ador_tlb::Recordset15* __fastcall
TCOMRecordset15T<T>::_xClone(void)
{
  Ador_tlb::Recordset15* ppvObject;
  OLECHECK(this->_xClone((Ador_tlb::Recordset15**)&ppvObject));
  return ppvObject;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  return (*this)->UpdateBatch(AffectRecords);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  return (*this)->CancelBatch(AffectRecords);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/)
{
  return (*this)->get_CursorLocation(plCursorLoc);
}

template <class T> Ador_tlb::CursorLocationEnum __fastcall
TCOMRecordset15T<T>::get_CursorLocation(void)
{
  Ador_tlb::CursorLocationEnum plCursorLoc;
  OLECHECK(this->get_CursorLocation((Ador_tlb::CursorLocationEnum*)&plCursorLoc));
  return plCursorLoc;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/)
{
  return (*this)->set_CursorLocation(plCursorLoc);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                   Ador_tlb::Recordset15** ppiRs/*[out,retval]*/)
{
  return (*this)->NextRecordset(RecordsAffected, ppiRs);
}

template <class T> Ador_tlb::Recordset15* __fastcall
TCOMRecordset15T<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/)
{
  Ador_tlb::Recordset15* ppiRs;
  OLECHECK(this->NextRecordset(, (Ador_tlb::Recordset15**)&ppiRs));
  return ppiRs;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                              VARIANT_BOOL* pb/*[out,retval]*/)
{
  return (*this)->Supports(CursorOptions, pb);
}

template <class T> VARIANT_BOOL __fastcall
TCOMRecordset15T<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/)
{
  VARIANT_BOOL pb;
  OLECHECK(this->Supports(, (VARIANT_BOOL*)&pb));
  return pb;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  return (*this)->get_Collect(Index, pvar);
}

template <class T> VARIANT __fastcall
TCOMRecordset15T<T>::get_Collect(VARIANT Index/*[in]*/)
{
  VARIANT pvar;
  OLECHECK(this->get_Collect(, (VARIANT*)&pvar));
  return pvar;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/)
{
  return (*this)->set_Collect(Index, pvar);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/)
{
  return (*this)->get_MarshalOptions(peMarshal);
}

template <class T> Ador_tlb::MarshalOptionsEnum __fastcall
TCOMRecordset15T<T>::get_MarshalOptions(void)
{
  Ador_tlb::MarshalOptionsEnum peMarshal;
  OLECHECK(this->get_MarshalOptions((Ador_tlb::MarshalOptionsEnum*)&peMarshal));
  return peMarshal;
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/)
{
  return (*this)->set_MarshalOptions(peMarshal);
}

template <class T> HRESULT __fastcall
TCOMRecordset15T<T>::Find(BSTR Criteria/*[in]*/, Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                          Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                          VARIANT Start/*[in,opt]*/)
{
  return (*this)->Find(Criteria, SkipRecords, SearchDirection, Start);
}

// *********************************************************************//
// DispIntf:  Recordset15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000050E-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
Recordset15DispT<T>::get_AbsolutePosition(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePosition((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::_set_ActiveConnection(LPDISPATCH pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_ActiveConnection(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_ActiveConnection(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset15DispT<T>::get_ActiveConnection(void)
{
  VARIANT pvar;
  this->get_ActiveConnection((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_BOF(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BOF"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset15DispT<T>::get_BOF(void)
{
  VARIANT_BOOL pb;
  this->get_BOF((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvBookmark /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset15DispT<T>::get_Bookmark(void)
{
  VARIANT pvBookmark;
  this->get_Bookmark((VARIANT*)&pvBookmark);
  return pvBookmark;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_Bookmark(VARIANT pvBookmark/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = pvBookmark /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_CacheSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset15DispT<T>::get_CacheSize(void)
{
  long pl;
  this->get_CacheSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_CacheSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorTypeEnum __fastcall
Recordset15DispT<T>::get_CursorType(void)
{
  Ador_tlb::CursorTypeEnum plCursorType;
  this->get_CursorType((Ador_tlb::CursorTypeEnum*)&plCursorType);
  return plCursorType;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EOF"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset15DispT<T>::get_EOF_(void)
{
  VARIANT_BOOL pb;
  this->get_EOF_((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Fields15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Fields15* __fastcall
Recordset15DispT<T>::get_Fields(void)
{
  Ador_tlb::Fields15* ppvObject;
  this->get_Fields((Ador_tlb::Fields15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plLockType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::LockTypeEnum __fastcall
Recordset15DispT<T>::get_LockType(void)
{
  Ador_tlb::LockTypeEnum plLockType;
  this->get_LockType((Ador_tlb::LockTypeEnum*)&plLockType);
  return plLockType;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = (int)plLockType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMaxRecords /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset15DispT<T>::get_MaxRecords(void)
{
  Ador_tlb::ADO_LONGPTR plMaxRecords;
  this->get_MaxRecords((Ador_tlb::ADO_LONGPTR*)&plMaxRecords);
  return plMaxRecords;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = plMaxRecords /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset15DispT<T>::get_RecordCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_RecordCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::_set_Source(LPDISPATCH pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_Source(BSTR pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Source(VARIANT* pvSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvSource /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset15DispT<T>::get_Source(void)
{
  VARIANT pvSource;
  this->get_Source((VARIANT*)&pvSource);
  return pvSource;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::AddNew(VARIANT FieldList/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(1012));
  TAutoArgs<2> _args;
  _args[1] = FieldList /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::CancelUpdate()
{
  _TDispID _dispid(*this, OLETEXT("CancelUpdate"), DISPID(1013));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(1014));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRows"), DISPID(1016));
  TAutoArgs<3> _args;
  _args[1] = Rows /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  _args[3] = Fields /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset15DispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/)
{
  VARIANT pvar;
  this->GetRows(Rows, Start, Fields, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(1017));
  TAutoArgs<2> _args;
  _args[1] = NumRecords /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(1018));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(1019));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(1020));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(1021));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                          Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                          Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                          long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(1022));
  TAutoArgs<5> _args;
  _args[1] = Source /*[VT_VARIANT:0]*/;
  _args[2] = ActiveConnection /*[VT_VARIANT:0]*/;
  _args[3] = (int)CursorType /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)LockType /*[VT_USERDEFINED:0]*/;
  _args[5] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Requery(long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(1023));
  TAutoArgs<1> _args;
  _args[1] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::_xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xResync"), DISPID(DISPID_UNKNOWN/*[1610809378]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::_Update(VARIANT Fields/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(1025));
  TAutoArgs<2> _args;
  _args[1] = Fields /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
Recordset15DispT<T>::get_AbsolutePage(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePage((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::EditModeEnum __fastcall
Recordset15DispT<T>::get_EditMode(void)
{
  Ador_tlb::EditModeEnum pl;
  this->get_EditMode((Ador_tlb::EditModeEnum*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Filter(VARIANT* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset15DispT<T>::get_Filter(void)
{
  VARIANT Criteria;
  this->get_Filter((VARIANT*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_Filter(VARIANT Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageCount"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset15DispT<T>::get_PageCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_PageCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_PageSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset15DispT<T>::get_PageSize(void)
{
  long pl;
  this->get_PageSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_PageSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Sort(BSTR* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset15DispT<T>::get_Sort(void)
{
  BSTR Criteria;
  this->get_Sort((BSTR*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_Sort(BSTR Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Status(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset15DispT<T>::get_Status(void)
{
  long pl;
  this->get_Status((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_State(long* plObjState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plObjState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset15DispT<T>::get_State(void)
{
  long plObjState;
  this->get_State((long*)&plObjState);
  return plObjState;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::_xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xClone"), DISPID(DISPID_UNKNOWN/*[1610809392]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset15DispT<T>::_xClone(void)
{
  Ador_tlb::Recordset15* ppvObject;
  this->_xClone((Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateBatch"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelBatch"), DISPID(1049));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorLoc /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorLocationEnum __fastcall
Recordset15DispT<T>::get_CursorLocation(void)
{
  Ador_tlb::CursorLocationEnum plCursorLoc;
  this->get_CursorLocation((Ador_tlb::CursorLocationEnum*)&plCursorLoc);
  return plCursorLoc;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorLoc /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                   Ador_tlb::Recordset15** ppiRs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecordset"), DISPID(1052));
  TAutoArgs<1> _args;
  _args[1] = RecordsAffected /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppiRs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset15DispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/)
{
  Ador_tlb::Recordset15* ppiRs;
  this->NextRecordset(RecordsAffected, (Ador_tlb::Recordset15**)&ppiRs);
  return ppiRs;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                              VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Supports"), DISPID(1036));
  TAutoArgs<1> _args;
  _args[1] = (int)CursorOptions /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset15DispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/)
{
  VARIANT_BOOL pb;
  this->Supports(CursorOptions, (VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset15DispT<T>::get_Collect(VARIANT Index/*[in]*/)
{
  VARIANT pvar;
  this->get_Collect(Index, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peMarshal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::MarshalOptionsEnum __fastcall
Recordset15DispT<T>::get_MarshalOptions(void)
{
  Ador_tlb::MarshalOptionsEnum peMarshal;
  this->get_MarshalOptions((Ador_tlb::MarshalOptionsEnum*)&peMarshal);
  return peMarshal;
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<1> _args;
  _args[1] = (int)peMarshal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::Find(BSTR Criteria/*[in]*/, Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                          Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                          VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(1058));
  TAutoArgs<4> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  _args[2] = SkipRecords /*[VT_I4:0]*/;
  _args[3] = (int)SearchDirection /*[VT_USERDEFINED:0]*/;
  _args[4] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset15DispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
Recordset15DispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  Recordset20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054F-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Recordset20DispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(1055));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkDataSource /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Recordset20DispT<T>::get_DataSource(void)
{
  LPUNKNOWN ppunkDataSource;
  this->get_DataSource((LPUNKNOWN*)&ppunkDataSource);
  return ppunkDataSource;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1056));
  TAutoArgs<1> _args;
  _args[1] = ppunkDataSource /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_xSave(BSTR FileName/*[in,def,opt]*/, 
                            Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xSave"), DISPID(1610874883));
  TAutoArgs<2> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)PersistFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCommand"), DISPID(1061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppCmd /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
Recordset20DispT<T>::get_ActiveCommand(void)
{
  LPDISPATCH ppCmd;
  this->get_ActiveCommand((LPDISPATCH*)&ppCmd);
  return ppCmd;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StayInSync"), DISPID(1063));
  TAutoArgs<1> _args;
  _args[1] = pbStayInSync /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StayInSync"), DISPID(1063));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbStayInSync /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset20DispT<T>::get_StayInSync(void)
{
  VARIANT_BOOL pbStayInSync;
  this->get_StayInSync((VARIANT_BOOL*)&pbStayInSync);
  return pbStayInSync;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                               long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                               BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/, 
                               BSTR* pRetString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetString"), DISPID(1062));
  TAutoArgs<5> _args;
  _args[1] = (int)StringFormat /*[VT_USERDEFINED:0]*/;
  _args[2] = NumRows /*[VT_I4:0]*/;
  _args[3] = ColumnDelimeter /*[VT_BSTR:0]*/;
  _args[4] = RowDelimeter /*[VT_BSTR:0]*/;
  _args[5] = NullExpr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset20DispT<T>::GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                               long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                               BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/)
{
  BSTR pRetString;
  this->GetString(StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, (BSTR*)&pRetString);
  return pRetString;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1064));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDataMember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset20DispT<T>::get_DataMember(void)
{
  BSTR pbstrDataMember;
  this->get_DataMember((BSTR*)&pbstrDataMember);
  return pbstrDataMember;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_DataMember(BSTR pbstrDataMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1064));
  TAutoArgs<1> _args;
  _args[1] = pbstrDataMember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/, 
                                      Ador_tlb::CompareEnum* pCompare/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareBookmarks"), DISPID(1065));
  TAutoArgs<2> _args;
  _args[1] = Bookmark1 /*[VT_VARIANT:0]*/;
  _args[2] = Bookmark2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((int*)pCompare /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::CompareEnum __fastcall
Recordset20DispT<T>::CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/)
{
  Ador_tlb::CompareEnum pCompare;
  this->CompareBookmarks(Bookmark1, Bookmark2, (Ador_tlb::CompareEnum*)&pCompare);
  return pCompare;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                           Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(1034));
  TAutoArgs<1> _args;
  _args[1] = (int)LockType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset20DispT<T>::Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/)
{
  Ador_tlb::Recordset15* ppvObject;
  this->Clone(LockType, (Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                            Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resync"), DISPID(1024));
  TAutoArgs<2> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)ResyncValues /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
Recordset20DispT<T>::get_AbsolutePosition(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePosition((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_set_ActiveConnection(LPDISPATCH pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_ActiveConnection(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_ActiveConnection(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset20DispT<T>::get_ActiveConnection(void)
{
  VARIANT pvar;
  this->get_ActiveConnection((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_BOF(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BOF"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset20DispT<T>::get_BOF(void)
{
  VARIANT_BOOL pb;
  this->get_BOF((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvBookmark /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset20DispT<T>::get_Bookmark(void)
{
  VARIANT pvBookmark;
  this->get_Bookmark((VARIANT*)&pvBookmark);
  return pvBookmark;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_Bookmark(VARIANT pvBookmark/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = pvBookmark /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_CacheSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset20DispT<T>::get_CacheSize(void)
{
  long pl;
  this->get_CacheSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_CacheSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorTypeEnum __fastcall
Recordset20DispT<T>::get_CursorType(void)
{
  Ador_tlb::CursorTypeEnum plCursorType;
  this->get_CursorType((Ador_tlb::CursorTypeEnum*)&plCursorType);
  return plCursorType;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EOF"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset20DispT<T>::get_EOF_(void)
{
  VARIANT_BOOL pb;
  this->get_EOF_((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Fields15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Fields15* __fastcall
Recordset20DispT<T>::get_Fields(void)
{
  Ador_tlb::Fields15* ppvObject;
  this->get_Fields((Ador_tlb::Fields15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plLockType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::LockTypeEnum __fastcall
Recordset20DispT<T>::get_LockType(void)
{
  Ador_tlb::LockTypeEnum plLockType;
  this->get_LockType((Ador_tlb::LockTypeEnum*)&plLockType);
  return plLockType;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = (int)plLockType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMaxRecords /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset20DispT<T>::get_MaxRecords(void)
{
  Ador_tlb::ADO_LONGPTR plMaxRecords;
  this->get_MaxRecords((Ador_tlb::ADO_LONGPTR*)&plMaxRecords);
  return plMaxRecords;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = plMaxRecords /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset20DispT<T>::get_RecordCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_RecordCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_set_Source(LPDISPATCH pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_Source(BSTR pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Source(VARIANT* pvSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvSource /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset20DispT<T>::get_Source(void)
{
  VARIANT pvSource;
  this->get_Source((VARIANT*)&pvSource);
  return pvSource;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::AddNew(VARIANT FieldList/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(1012));
  TAutoArgs<2> _args;
  _args[1] = FieldList /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::CancelUpdate()
{
  _TDispID _dispid(*this, OLETEXT("CancelUpdate"), DISPID(1013));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(1014));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRows"), DISPID(1016));
  TAutoArgs<3> _args;
  _args[1] = Rows /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  _args[3] = Fields /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset20DispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/)
{
  VARIANT pvar;
  this->GetRows(Rows, Start, Fields, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(1017));
  TAutoArgs<2> _args;
  _args[1] = NumRecords /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(1018));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(1019));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(1020));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(1021));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                          Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                          Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                          long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(1022));
  TAutoArgs<5> _args;
  _args[1] = Source /*[VT_VARIANT:0]*/;
  _args[2] = ActiveConnection /*[VT_VARIANT:0]*/;
  _args[3] = (int)CursorType /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)LockType /*[VT_USERDEFINED:0]*/;
  _args[5] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Requery(long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(1023));
  TAutoArgs<1> _args;
  _args[1] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xResync"), DISPID(DISPID_UNKNOWN/*[1610809378]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_Update(VARIANT Fields/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(1025));
  TAutoArgs<2> _args;
  _args[1] = Fields /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
Recordset20DispT<T>::get_AbsolutePage(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePage((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::EditModeEnum __fastcall
Recordset20DispT<T>::get_EditMode(void)
{
  Ador_tlb::EditModeEnum pl;
  this->get_EditMode((Ador_tlb::EditModeEnum*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Filter(VARIANT* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset20DispT<T>::get_Filter(void)
{
  VARIANT Criteria;
  this->get_Filter((VARIANT*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_Filter(VARIANT Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageCount"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset20DispT<T>::get_PageCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_PageCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_PageSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset20DispT<T>::get_PageSize(void)
{
  long pl;
  this->get_PageSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_PageSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Sort(BSTR* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset20DispT<T>::get_Sort(void)
{
  BSTR Criteria;
  this->get_Sort((BSTR*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_Sort(BSTR Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Status(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset20DispT<T>::get_Status(void)
{
  long pl;
  this->get_Status((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_State(long* plObjState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plObjState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset20DispT<T>::get_State(void)
{
  long plObjState;
  this->get_State((long*)&plObjState);
  return plObjState;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::_xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xClone"), DISPID(DISPID_UNKNOWN/*[1610809392]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset20DispT<T>::_xClone(void)
{
  Ador_tlb::Recordset15* ppvObject;
  this->_xClone((Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateBatch"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelBatch"), DISPID(1049));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorLoc /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorLocationEnum __fastcall
Recordset20DispT<T>::get_CursorLocation(void)
{
  Ador_tlb::CursorLocationEnum plCursorLoc;
  this->get_CursorLocation((Ador_tlb::CursorLocationEnum*)&plCursorLoc);
  return plCursorLoc;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorLoc /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                   Ador_tlb::Recordset15** ppiRs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecordset"), DISPID(1052));
  TAutoArgs<1> _args;
  _args[1] = RecordsAffected /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppiRs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset20DispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/)
{
  Ador_tlb::Recordset15* ppiRs;
  this->NextRecordset(RecordsAffected, (Ador_tlb::Recordset15**)&ppiRs);
  return ppiRs;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                              VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Supports"), DISPID(1036));
  TAutoArgs<1> _args;
  _args[1] = (int)CursorOptions /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset20DispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/)
{
  VARIANT_BOOL pb;
  this->Supports(CursorOptions, (VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset20DispT<T>::get_Collect(VARIANT Index/*[in]*/)
{
  VARIANT pvar;
  this->get_Collect(Index, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peMarshal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::MarshalOptionsEnum __fastcall
Recordset20DispT<T>::get_MarshalOptions(void)
{
  Ador_tlb::MarshalOptionsEnum peMarshal;
  this->get_MarshalOptions((Ador_tlb::MarshalOptionsEnum*)&peMarshal);
  return peMarshal;
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<1> _args;
  _args[1] = (int)peMarshal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::Find(BSTR Criteria/*[in]*/, Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                          Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                          VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(1058));
  TAutoArgs<4> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  _args[2] = SkipRecords /*[VT_I4:0]*/;
  _args[3] = (int)SearchDirection /*[VT_USERDEFINED:0]*/;
  _args[4] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset20DispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
Recordset20DispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  Recordset21
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000555-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Recordset21DispT<T>::Seek(VARIANT KeyValues/*[in]*/, Ador_tlb::SeekEnum SeekOption/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seek"), DISPID(1066));
  TAutoArgs<2> _args;
  _args[1] = KeyValues /*[VT_VARIANT:0]*/;
  _args[2] = (int)SeekOption /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_Index(BSTR pbstrIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1067));
  TAutoArgs<1> _args;
  _args[1] = pbstrIndex /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Index(BSTR* pbstrIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1067));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrIndex /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset21DispT<T>::get_Index(void)
{
  BSTR pbstrIndex;
  this->get_Index((BSTR*)&pbstrIndex);
  return pbstrIndex;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(1055));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkDataSource /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Recordset21DispT<T>::get_DataSource(void)
{
  LPUNKNOWN ppunkDataSource;
  this->get_DataSource((LPUNKNOWN*)&ppunkDataSource);
  return ppunkDataSource;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1056));
  TAutoArgs<1> _args;
  _args[1] = ppunkDataSource /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_xSave(BSTR FileName/*[in,def,opt]*/, 
                            Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xSave"), DISPID(1610874883));
  TAutoArgs<2> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)PersistFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCommand"), DISPID(1061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppCmd /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
Recordset21DispT<T>::get_ActiveCommand(void)
{
  LPDISPATCH ppCmd;
  this->get_ActiveCommand((LPDISPATCH*)&ppCmd);
  return ppCmd;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StayInSync"), DISPID(1063));
  TAutoArgs<1> _args;
  _args[1] = pbStayInSync /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StayInSync"), DISPID(1063));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbStayInSync /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset21DispT<T>::get_StayInSync(void)
{
  VARIANT_BOOL pbStayInSync;
  this->get_StayInSync((VARIANT_BOOL*)&pbStayInSync);
  return pbStayInSync;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                               long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                               BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/, 
                               BSTR* pRetString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetString"), DISPID(1062));
  TAutoArgs<5> _args;
  _args[1] = (int)StringFormat /*[VT_USERDEFINED:0]*/;
  _args[2] = NumRows /*[VT_I4:0]*/;
  _args[3] = ColumnDelimeter /*[VT_BSTR:0]*/;
  _args[4] = RowDelimeter /*[VT_BSTR:0]*/;
  _args[5] = NullExpr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset21DispT<T>::GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                               long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                               BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/)
{
  BSTR pRetString;
  this->GetString(StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, (BSTR*)&pRetString);
  return pRetString;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1064));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDataMember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset21DispT<T>::get_DataMember(void)
{
  BSTR pbstrDataMember;
  this->get_DataMember((BSTR*)&pbstrDataMember);
  return pbstrDataMember;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_DataMember(BSTR pbstrDataMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1064));
  TAutoArgs<1> _args;
  _args[1] = pbstrDataMember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/, 
                                      Ador_tlb::CompareEnum* pCompare/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareBookmarks"), DISPID(1065));
  TAutoArgs<2> _args;
  _args[1] = Bookmark1 /*[VT_VARIANT:0]*/;
  _args[2] = Bookmark2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((int*)pCompare /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::CompareEnum __fastcall
Recordset21DispT<T>::CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/)
{
  Ador_tlb::CompareEnum pCompare;
  this->CompareBookmarks(Bookmark1, Bookmark2, (Ador_tlb::CompareEnum*)&pCompare);
  return pCompare;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                           Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(1034));
  TAutoArgs<1> _args;
  _args[1] = (int)LockType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset21DispT<T>::Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/)
{
  Ador_tlb::Recordset15* ppvObject;
  this->Clone(LockType, (Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                            Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resync"), DISPID(1024));
  TAutoArgs<2> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)ResyncValues /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
Recordset21DispT<T>::get_AbsolutePosition(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePosition((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_set_ActiveConnection(LPDISPATCH pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_ActiveConnection(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_ActiveConnection(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset21DispT<T>::get_ActiveConnection(void)
{
  VARIANT pvar;
  this->get_ActiveConnection((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_BOF(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BOF"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset21DispT<T>::get_BOF(void)
{
  VARIANT_BOOL pb;
  this->get_BOF((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvBookmark /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset21DispT<T>::get_Bookmark(void)
{
  VARIANT pvBookmark;
  this->get_Bookmark((VARIANT*)&pvBookmark);
  return pvBookmark;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_Bookmark(VARIANT pvBookmark/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = pvBookmark /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_CacheSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset21DispT<T>::get_CacheSize(void)
{
  long pl;
  this->get_CacheSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_CacheSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorTypeEnum __fastcall
Recordset21DispT<T>::get_CursorType(void)
{
  Ador_tlb::CursorTypeEnum plCursorType;
  this->get_CursorType((Ador_tlb::CursorTypeEnum*)&plCursorType);
  return plCursorType;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EOF"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset21DispT<T>::get_EOF_(void)
{
  VARIANT_BOOL pb;
  this->get_EOF_((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Fields15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Fields15* __fastcall
Recordset21DispT<T>::get_Fields(void)
{
  Ador_tlb::Fields15* ppvObject;
  this->get_Fields((Ador_tlb::Fields15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plLockType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::LockTypeEnum __fastcall
Recordset21DispT<T>::get_LockType(void)
{
  Ador_tlb::LockTypeEnum plLockType;
  this->get_LockType((Ador_tlb::LockTypeEnum*)&plLockType);
  return plLockType;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = (int)plLockType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMaxRecords /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset21DispT<T>::get_MaxRecords(void)
{
  Ador_tlb::ADO_LONGPTR plMaxRecords;
  this->get_MaxRecords((Ador_tlb::ADO_LONGPTR*)&plMaxRecords);
  return plMaxRecords;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = plMaxRecords /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset21DispT<T>::get_RecordCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_RecordCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_set_Source(LPDISPATCH pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_Source(BSTR pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Source(VARIANT* pvSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvSource /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset21DispT<T>::get_Source(void)
{
  VARIANT pvSource;
  this->get_Source((VARIANT*)&pvSource);
  return pvSource;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::AddNew(VARIANT FieldList/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(1012));
  TAutoArgs<2> _args;
  _args[1] = FieldList /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::CancelUpdate()
{
  _TDispID _dispid(*this, OLETEXT("CancelUpdate"), DISPID(1013));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(1014));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRows"), DISPID(1016));
  TAutoArgs<3> _args;
  _args[1] = Rows /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  _args[3] = Fields /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset21DispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                             VARIANT Fields/*[in,opt]*/)
{
  VARIANT pvar;
  this->GetRows(Rows, Start, Fields, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(1017));
  TAutoArgs<2> _args;
  _args[1] = NumRecords /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(1018));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(1019));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(1020));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(1021));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                          Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                          Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                          long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(1022));
  TAutoArgs<5> _args;
  _args[1] = Source /*[VT_VARIANT:0]*/;
  _args[2] = ActiveConnection /*[VT_VARIANT:0]*/;
  _args[3] = (int)CursorType /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)LockType /*[VT_USERDEFINED:0]*/;
  _args[5] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Requery(long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(1023));
  TAutoArgs<1> _args;
  _args[1] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xResync"), DISPID(DISPID_UNKNOWN/*[1610809378]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_Update(VARIANT Fields/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(1025));
  TAutoArgs<2> _args;
  _args[1] = Fields /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
Recordset21DispT<T>::get_AbsolutePage(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePage((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::EditModeEnum __fastcall
Recordset21DispT<T>::get_EditMode(void)
{
  Ador_tlb::EditModeEnum pl;
  this->get_EditMode((Ador_tlb::EditModeEnum*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Filter(VARIANT* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset21DispT<T>::get_Filter(void)
{
  VARIANT Criteria;
  this->get_Filter((VARIANT*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_Filter(VARIANT Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageCount"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Recordset21DispT<T>::get_PageCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_PageCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_PageSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset21DispT<T>::get_PageSize(void)
{
  long pl;
  this->get_PageSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_PageSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Sort(BSTR* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Recordset21DispT<T>::get_Sort(void)
{
  BSTR Criteria;
  this->get_Sort((BSTR*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_Sort(BSTR Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Status(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset21DispT<T>::get_Status(void)
{
  long pl;
  this->get_Status((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_State(long* plObjState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plObjState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Recordset21DispT<T>::get_State(void)
{
  long plObjState;
  this->get_State((long*)&plObjState);
  return plObjState;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::_xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xClone"), DISPID(DISPID_UNKNOWN/*[1610809392]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset21DispT<T>::_xClone(void)
{
  Ador_tlb::Recordset15* ppvObject;
  this->_xClone((Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateBatch"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelBatch"), DISPID(1049));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorLoc /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorLocationEnum __fastcall
Recordset21DispT<T>::get_CursorLocation(void)
{
  Ador_tlb::CursorLocationEnum plCursorLoc;
  this->get_CursorLocation((Ador_tlb::CursorLocationEnum*)&plCursorLoc);
  return plCursorLoc;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorLoc /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                   Ador_tlb::Recordset15** ppiRs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecordset"), DISPID(1052));
  TAutoArgs<1> _args;
  _args[1] = RecordsAffected /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppiRs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
Recordset21DispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/)
{
  Ador_tlb::Recordset15* ppiRs;
  this->NextRecordset(RecordsAffected, (Ador_tlb::Recordset15**)&ppiRs);
  return ppiRs;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                              VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Supports"), DISPID(1036));
  TAutoArgs<1> _args;
  _args[1] = (int)CursorOptions /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
Recordset21DispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/)
{
  VARIANT_BOOL pb;
  this->Supports(CursorOptions, (VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Recordset21DispT<T>::get_Collect(VARIANT Index/*[in]*/)
{
  VARIANT pvar;
  this->get_Collect(Index, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peMarshal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::MarshalOptionsEnum __fastcall
Recordset21DispT<T>::get_MarshalOptions(void)
{
  Ador_tlb::MarshalOptionsEnum peMarshal;
  this->get_MarshalOptions((Ador_tlb::MarshalOptionsEnum*)&peMarshal);
  return peMarshal;
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<1> _args;
  _args[1] = (int)peMarshal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::Find(BSTR Criteria/*[in]*/, Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                          Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                          VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(1058));
  TAutoArgs<4> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  _args[2] = SkipRecords /*[VT_I4:0]*/;
  _args[3] = (int)SearchDirection /*[VT_USERDEFINED:0]*/;
  _args[4] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Recordset21DispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
Recordset21DispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  _Recordset
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000556-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Save(VARIANT Destination/*[in,opt]*/, 
                         Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Save"), DISPID(1057));
  TAutoArgs<2> _args;
  _args[1] = Destination /*[VT_VARIANT:0]*/;
  _args[2] = (int)PersistFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Seek(VARIANT KeyValues/*[in]*/, Ador_tlb::SeekEnum SeekOption/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Seek"), DISPID(1066));
  TAutoArgs<2> _args;
  _args[1] = KeyValues /*[VT_VARIANT:0]*/;
  _args[2] = (int)SeekOption /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_Index(BSTR pbstrIndex/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1067));
  TAutoArgs<1> _args;
  _args[1] = pbstrIndex /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Index(BSTR* pbstrIndex/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(1067));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrIndex /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RecordsetDispT<T>::get_Index(void)
{
  BSTR pbstrIndex;
  this->get_Index((BSTR*)&pbstrIndex);
  return pbstrIndex;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Cancel()
{
  _TDispID _dispid(*this, OLETEXT("Cancel"), DISPID(1055));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_DataSource(LPUNKNOWN* ppunkDataSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1056));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppunkDataSource /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
_RecordsetDispT<T>::get_DataSource(void)
{
  LPUNKNOWN ppunkDataSource;
  this->get_DataSource((LPUNKNOWN*)&ppunkDataSource);
  return ppunkDataSource;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_set_DataSource(LPUNKNOWN ppunkDataSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataSource"), DISPID(1056));
  TAutoArgs<1> _args;
  _args[1] = ppunkDataSource /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_xSave(BSTR FileName/*[in,def,opt]*/, 
                           Ador_tlb::PersistFormatEnum PersistFormat/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xSave"), DISPID(1610874883));
  TAutoArgs<2> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = (int)PersistFormat /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_ActiveCommand(LPDISPATCH* ppCmd/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveCommand"), DISPID(1061));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppCmd /*[VT_DISPATCH:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPDISPATCH __fastcall
_RecordsetDispT<T>::get_ActiveCommand(void)
{
  LPDISPATCH ppCmd;
  this->get_ActiveCommand((LPDISPATCH*)&ppCmd);
  return ppCmd;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_StayInSync(VARIANT_BOOL pbStayInSync/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StayInSync"), DISPID(1063));
  TAutoArgs<1> _args;
  _args[1] = pbStayInSync /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_StayInSync(VARIANT_BOOL* pbStayInSync/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("StayInSync"), DISPID(1063));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbStayInSync /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_RecordsetDispT<T>::get_StayInSync(void)
{
  VARIANT_BOOL pbStayInSync;
  this->get_StayInSync((VARIANT_BOOL*)&pbStayInSync);
  return pbStayInSync;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                              long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                              BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/, 
                              BSTR* pRetString/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetString"), DISPID(1062));
  TAutoArgs<5> _args;
  _args[1] = (int)StringFormat /*[VT_USERDEFINED:0]*/;
  _args[2] = NumRows /*[VT_I4:0]*/;
  _args[3] = ColumnDelimeter /*[VT_BSTR:0]*/;
  _args[4] = RowDelimeter /*[VT_BSTR:0]*/;
  _args[5] = NullExpr /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(pRetString /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
_RecordsetDispT<T>::GetString(Ador_tlb::StringFormatEnum StringFormat/*[in,def,opt]*/, 
                              long NumRows/*[in,def,opt]*/, BSTR ColumnDelimeter/*[in,def,opt]*/, 
                              BSTR RowDelimeter/*[in,def,opt]*/, BSTR NullExpr/*[in,def,opt]*/)
{
  BSTR pRetString;
  this->GetString(StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, (BSTR*)&pRetString);
  return pRetString;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_DataMember(BSTR* pbstrDataMember/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1064));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstrDataMember /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RecordsetDispT<T>::get_DataMember(void)
{
  BSTR pbstrDataMember;
  this->get_DataMember((BSTR*)&pbstrDataMember);
  return pbstrDataMember;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_DataMember(BSTR pbstrDataMember/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataMember"), DISPID(1064));
  TAutoArgs<1> _args;
  _args[1] = pbstrDataMember /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/, 
                                     Ador_tlb::CompareEnum* pCompare/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompareBookmarks"), DISPID(1065));
  TAutoArgs<2> _args;
  _args[1] = Bookmark1 /*[VT_VARIANT:0]*/;
  _args[2] = Bookmark2 /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((int*)pCompare /*[VT_USERDEFINED:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::CompareEnum __fastcall
_RecordsetDispT<T>::CompareBookmarks(VARIANT Bookmark1/*[in]*/, VARIANT Bookmark2/*[in]*/)
{
  Ador_tlb::CompareEnum pCompare;
  this->CompareBookmarks(Bookmark1, Bookmark2, (Ador_tlb::CompareEnum*)&pCompare);
  return pCompare;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                          Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(1034));
  TAutoArgs<1> _args;
  _args[1] = (int)LockType /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
_RecordsetDispT<T>::Clone(Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/)
{
  Ador_tlb::Recordset15* ppvObject;
  this->Clone(LockType, (Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Resync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/, 
                           Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resync"), DISPID(1024));
  TAutoArgs<2> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)ResyncValues /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_AbsolutePosition(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
_RecordsetDispT<T>::get_AbsolutePosition(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePosition((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_AbsolutePosition(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePosition"), DISPID(1000));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_set_ActiveConnection(LPDISPATCH pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_ActiveConnection(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_ActiveConnection(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActiveConnection"), DISPID(1001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RecordsetDispT<T>::get_ActiveConnection(void)
{
  VARIANT pvar;
  this->get_ActiveConnection((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_BOF(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BOF"), DISPID(1002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_RecordsetDispT<T>::get_BOF(void)
{
  VARIANT_BOOL pb;
  this->get_BOF((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Bookmark(VARIANT* pvBookmark/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvBookmark /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RecordsetDispT<T>::get_Bookmark(void)
{
  VARIANT pvBookmark;
  this->get_Bookmark((VARIANT*)&pvBookmark);
  return pvBookmark;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_Bookmark(VARIANT pvBookmark/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Bookmark"), DISPID(1003));
  TAutoArgs<1> _args;
  _args[1] = pvBookmark /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_CacheSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RecordsetDispT<T>::get_CacheSize(void)
{
  long pl;
  this->get_CacheSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_CacheSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CacheSize"), DISPID(1004));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_CursorType(Ador_tlb::CursorTypeEnum* plCursorType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorTypeEnum __fastcall
_RecordsetDispT<T>::get_CursorType(void)
{
  Ador_tlb::CursorTypeEnum plCursorType;
  this->get_CursorType((Ador_tlb::CursorTypeEnum*)&plCursorType);
  return plCursorType;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_CursorType(Ador_tlb::CursorTypeEnum plCursorType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorType"), DISPID(1005));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_EOF_(VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EOF"), DISPID(1006));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_RecordsetDispT<T>::get_EOF_(void)
{
  VARIANT_BOOL pb;
  this->get_EOF_((VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Fields(Ador_tlb::Fields15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Fields"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Fields15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Fields15* __fastcall
_RecordsetDispT<T>::get_Fields(void)
{
  Ador_tlb::Fields15* ppvObject;
  this->get_Fields((Ador_tlb::Fields15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_LockType(Ador_tlb::LockTypeEnum* plLockType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plLockType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::LockTypeEnum __fastcall
_RecordsetDispT<T>::get_LockType(void)
{
  Ador_tlb::LockTypeEnum plLockType;
  this->get_LockType((Ador_tlb::LockTypeEnum*)&plLockType);
  return plLockType;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_LockType(Ador_tlb::LockTypeEnum plLockType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LockType"), DISPID(1008));
  TAutoArgs<1> _args;
  _args[1] = (int)plLockType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_MaxRecords(Ador_tlb::ADO_LONGPTR* plMaxRecords/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plMaxRecords /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
_RecordsetDispT<T>::get_MaxRecords(void)
{
  Ador_tlb::ADO_LONGPTR plMaxRecords;
  this->get_MaxRecords((Ador_tlb::ADO_LONGPTR*)&plMaxRecords);
  return plMaxRecords;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_MaxRecords(Ador_tlb::ADO_LONGPTR plMaxRecords/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxRecords"), DISPID(1009));
  TAutoArgs<1> _args;
  _args[1] = plMaxRecords /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_RecordCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RecordCount"), DISPID(1010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
_RecordsetDispT<T>::get_RecordCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_RecordCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_set_Source(LPDISPATCH pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_DISPATCH:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_Source(BSTR pvSource/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<1> _args;
  _args[1] = pvSource /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Source(VARIANT* pvSource/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Source"), DISPID(1011));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvSource /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RecordsetDispT<T>::get_Source(void)
{
  VARIANT pvSource;
  this->get_Source((VARIANT*)&pvSource);
  return pvSource;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::AddNew(VARIANT FieldList/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddNew"), DISPID(1012));
  TAutoArgs<2> _args;
  _args[1] = FieldList /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::CancelUpdate()
{
  _TDispID _dispid(*this, OLETEXT("CancelUpdate"), DISPID(1013));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Close()
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(1014));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Delete(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(1015));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                            VARIANT Fields/*[in,opt]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRows"), DISPID(1016));
  TAutoArgs<3> _args;
  _args[1] = Rows /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  _args[3] = Fields /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RecordsetDispT<T>::GetRows(long Rows/*[in,def,opt]*/, VARIANT Start/*[in,opt]*/, 
                            VARIANT Fields/*[in,opt]*/)
{
  VARIANT pvar;
  this->GetRows(Rows, Start, Fields, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Move(Ador_tlb::ADO_LONGPTR NumRecords/*[in]*/, VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Move"), DISPID(1017));
  TAutoArgs<2> _args;
  _args[1] = NumRecords /*[VT_I4:0]*/;
  _args[2] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::MoveNext()
{
  _TDispID _dispid(*this, OLETEXT("MoveNext"), DISPID(1018));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::MovePrevious()
{
  _TDispID _dispid(*this, OLETEXT("MovePrevious"), DISPID(1019));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::MoveFirst()
{
  _TDispID _dispid(*this, OLETEXT("MoveFirst"), DISPID(1020));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::MoveLast()
{
  _TDispID _dispid(*this, OLETEXT("MoveLast"), DISPID(1021));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Open(VARIANT Source/*[in,opt]*/, VARIANT ActiveConnection/*[in,opt]*/, 
                         Ador_tlb::CursorTypeEnum CursorType/*[in,def,opt]*/, 
                         Ador_tlb::LockTypeEnum LockType/*[in,def,opt]*/, 
                         long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(1022));
  TAutoArgs<5> _args;
  _args[1] = Source /*[VT_VARIANT:0]*/;
  _args[2] = ActiveConnection /*[VT_VARIANT:0]*/;
  _args[3] = (int)CursorType /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)LockType /*[VT_USERDEFINED:0]*/;
  _args[5] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Requery(long Options/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Requery"), DISPID(1023));
  TAutoArgs<1> _args;
  _args[1] = Options /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_xResync(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xResync"), DISPID(DISPID_UNKNOWN/*[1610809378]*/));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_Update(VARIANT Fields/*[in,opt]*/, VARIANT Values/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(1025));
  TAutoArgs<2> _args;
  _args[1] = Fields /*[VT_VARIANT:0]*/;
  _args[2] = Values /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_AbsolutePage(Ador_tlb::PositionEnum_Param* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::PositionEnum_Param __fastcall
_RecordsetDispT<T>::get_AbsolutePage(void)
{
  Ador_tlb::PositionEnum_Param pl;
  this->get_AbsolutePage((Ador_tlb::PositionEnum_Param*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_AbsolutePage(Ador_tlb::PositionEnum_Param pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbsolutePage"), DISPID(1047));
  TAutoArgs<1> _args;
  _args[1] = (int)pl /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_EditMode(Ador_tlb::EditModeEnum* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(1026));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pl /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::EditModeEnum __fastcall
_RecordsetDispT<T>::get_EditMode(void)
{
  Ador_tlb::EditModeEnum pl;
  this->get_EditMode((Ador_tlb::EditModeEnum*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Filter(VARIANT* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RecordsetDispT<T>::get_Filter(void)
{
  VARIANT Criteria;
  this->get_Filter((VARIANT*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_Filter(VARIANT Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Filter"), DISPID(1030));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_PageCount(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageCount"), DISPID(1050));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
_RecordsetDispT<T>::get_PageCount(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_PageCount((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_PageSize(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RecordsetDispT<T>::get_PageSize(void)
{
  long pl;
  this->get_PageSize((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_PageSize(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PageSize"), DISPID(1048));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Sort(BSTR* Criteria/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Criteria /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
_RecordsetDispT<T>::get_Sort(void)
{
  BSTR Criteria;
  this->get_Sort((BSTR*)&Criteria);
  return Criteria;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_Sort(BSTR Criteria/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Sort"), DISPID(1031));
  TAutoArgs<1> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Status(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(1029));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RecordsetDispT<T>::get_Status(void)
{
  long pl;
  this->get_Status((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_State(long* plObjState/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("State"), DISPID(1054));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(plObjState /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
_RecordsetDispT<T>::get_State(void)
{
  long plObjState;
  this->get_State((long*)&plObjState);
  return plObjState;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::_xClone(Ador_tlb::Recordset15** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_xClone"), DISPID(DISPID_UNKNOWN/*[1610809392]*/));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
_RecordsetDispT<T>::_xClone(void)
{
  Ador_tlb::Recordset15* ppvObject;
  this->_xClone((Ador_tlb::Recordset15**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::UpdateBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateBatch"), DISPID(1035));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::CancelBatch(Ador_tlb::AffectEnum AffectRecords/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("CancelBatch"), DISPID(1049));
  TAutoArgs<1> _args;
  _args[1] = (int)AffectRecords /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_CursorLocation(Ador_tlb::CursorLocationEnum* plCursorLoc/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)plCursorLoc /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::CursorLocationEnum __fastcall
_RecordsetDispT<T>::get_CursorLocation(void)
{
  Ador_tlb::CursorLocationEnum plCursorLoc;
  this->get_CursorLocation((Ador_tlb::CursorLocationEnum*)&plCursorLoc);
  return plCursorLoc;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_CursorLocation(Ador_tlb::CursorLocationEnum plCursorLoc/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CursorLocation"), DISPID(1051));
  TAutoArgs<1> _args;
  _args[1] = (int)plCursorLoc /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/, 
                                  Ador_tlb::Recordset15** ppiRs/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextRecordset"), DISPID(1052));
  TAutoArgs<1> _args;
  _args[1] = RecordsAffected /*[VT_VARIANT:1]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Recordset15**)ppiRs /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ador_tlb::Recordset15* __fastcall
_RecordsetDispT<T>::NextRecordset(VARIANT* RecordsAffected/*[out,opt]*/)
{
  Ador_tlb::Recordset15* ppiRs;
  this->NextRecordset(RecordsAffected, (Ador_tlb::Recordset15**)&ppiRs);
  return ppiRs;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/, 
                             VARIANT_BOOL* pb/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Supports"), DISPID(1036));
  TAutoArgs<1> _args;
  _args[1] = (int)CursorOptions /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(pb /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
_RecordsetDispT<T>::Supports(Ador_tlb::CursorOptionEnum CursorOptions/*[in]*/)
{
  VARIANT_BOOL pb;
  this->Supports(CursorOptions, (VARIANT_BOOL*)&pb);
  return pb;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Collect(VARIANT Index/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
_RecordsetDispT<T>::get_Collect(VARIANT Index/*[in]*/)
{
  VARIANT pvar;
  this->get_Collect(Index, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_Collect(VARIANT Index/*[in]*/, VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Collect"), DISPID(-8));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  _args[2] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_MarshalOptions(Ador_tlb::MarshalOptionsEnum* peMarshal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)peMarshal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::MarshalOptionsEnum __fastcall
_RecordsetDispT<T>::get_MarshalOptions(void)
{
  Ador_tlb::MarshalOptionsEnum peMarshal;
  this->get_MarshalOptions((Ador_tlb::MarshalOptionsEnum*)&peMarshal);
  return peMarshal;
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::set_MarshalOptions(Ador_tlb::MarshalOptionsEnum peMarshal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MarshalOptions"), DISPID(1053));
  TAutoArgs<1> _args;
  _args[1] = (int)peMarshal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::Find(BSTR Criteria/*[in]*/, Ador_tlb::ADO_LONGPTR SkipRecords/*[in,def,opt]*/, 
                         Ador_tlb::SearchDirectionEnum SearchDirection/*[in,def,opt]*/, 
                         VARIANT Start/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Find"), DISPID(1058));
  TAutoArgs<4> _args;
  _args[1] = Criteria /*[VT_BSTR:0]*/;
  _args[2] = SkipRecords /*[VT_I4:0]*/;
  _args[3] = (int)SearchDirection /*[VT_USERDEFINED:0]*/;
  _args[4] = Start /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_RecordsetDispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
_RecordsetDispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  Fields15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000506-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Fields15DispT<T>::get_Item(VARIANT Index/*[in]*/, Ador_tlb::Field20** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Field20**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Field20* __fastcall
Fields15DispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ador_tlb::Field20* ppvObject;
  this->get_Item(Index, (Ador_tlb::Field20**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Fields15DispT<T>::get_Count(long* c/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(c /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Fields15DispT<T>::get_Count(void)
{
  long c;
  this->get_Count((long*)&c);
  return c;
}

template <class T> HRESULT __fastcall
Fields15DispT<T>::_NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppvObject /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Fields15DispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppvObject;
  this->_NewEnum((LPUNKNOWN*)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Fields15DispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Fields20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054D-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Fields20DispT<T>::_Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                          Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                          Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Append"), DISPID(1610874880));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[3] = DefinedSize /*[VT_I4:0]*/;
  _args[4] = (int)Attrib /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Fields20DispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Fields20DispT<T>::get_Item(VARIANT Index/*[in]*/, Ador_tlb::Field20** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Field20**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Field20* __fastcall
Fields20DispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ador_tlb::Field20* ppvObject;
  this->get_Item(Index, (Ador_tlb::Field20**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Fields20DispT<T>::get_Count(long* c/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(c /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Fields20DispT<T>::get_Count(void)
{
  long c;
  this->get_Count((long*)&c);
  return c;
}

template <class T> HRESULT __fastcall
Fields20DispT<T>::_NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppvObject /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Fields20DispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppvObject;
  this->_NewEnum((LPUNKNOWN*)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
Fields20DispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Fields
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000564-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
FieldsDispT<T>::Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                       Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                       Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/, 
                       VARIANT FieldValue/*[in,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Append"), DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[3] = DefinedSize /*[VT_I4:0]*/;
  _args[4] = (int)Attrib /*[VT_USERDEFINED:0]*/;
  _args[5] = FieldValue /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::_Update()
{
  _TDispID _dispid(*this, OLETEXT("Update"), DISPID(5));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::Resync(Ador_tlb::ResyncEnum ResyncValues/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resync"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (int)ResyncValues /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::CancelUpdate()
{
  _TDispID _dispid(*this, OLETEXT("CancelUpdate"), DISPID(7));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::_Append(BSTR Name/*[in]*/, Ador_tlb::DataTypeEnum Type/*[in]*/, 
                        Ador_tlb::ADO_LONGPTR DefinedSize/*[in,def,opt]*/, 
                        Ador_tlb::FieldAttributeEnum Attrib/*[in,def,opt]*/)
{
  _TDispID _dispid(*this, OLETEXT("_Append"), DISPID(1610874880));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = (int)Type /*[VT_USERDEFINED:0]*/;
  _args[3] = DefinedSize /*[VT_I4:0]*/;
  _args[4] = (int)Attrib /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::Delete(VARIANT Index/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Delete"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::get_Item(VARIANT Index/*[in]*/, Ador_tlb::Field20** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Field20**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Field20* __fastcall
FieldsDispT<T>::get_Item(VARIANT Index/*[in]*/)
{
  Ador_tlb::Field20* ppvObject;
  this->get_Item(Index, (Ador_tlb::Field20**)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::get_Count(long* c/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(c /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldsDispT<T>::get_Count(void)
{
  long c;
  this->get_Count((long*)&c);
  return c;
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::_NewEnum(LPUNKNOWN* ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppvObject /*[VT_UNKNOWN:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FieldsDispT<T>::_NewEnum(void)
{
  LPUNKNOWN ppvObject;
  this->_NewEnum((LPUNKNOWN*)&ppvObject);
  return ppvObject;
}

template <class T> HRESULT __fastcall
FieldsDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(2));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  Field20
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0000054C-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Field20DispT<T>::get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActualSize"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Field20DispT<T>::get_ActualSize(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_ActualSize((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_Attributes(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(1114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Field20DispT<T>::get_Attributes(void)
{
  long pl;
  this->get_Attributes((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefinedSize"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Field20DispT<T>::get_DefinedSize(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_DefinedSize((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Field20DispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pDataType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::DataTypeEnum __fastcall
Field20DispT<T>::get_Type(void)
{
  Ador_tlb::DataTypeEnum pDataType;
  this->get_Type((Ador_tlb::DataTypeEnum*)&pDataType);
  return pDataType;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_Value(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field20DispT<T>::get_Value(void)
{
  VARIANT pvar;
  this->get_Value((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::set_Value(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_Precision(unsigned_char* pbPrecision/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precision"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbPrecision /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
Field20DispT<T>::get_Precision(void)
{
  unsigned_char pbPrecision;
  this->get_Precision((unsigned_char*)&pbPrecision);
  return pbPrecision;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumericScale"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbNumericScale /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
Field20DispT<T>::get_NumericScale(void)
{
  unsigned_char pbNumericScale;
  this->get_NumericScale((unsigned_char*)&pbNumericScale);
  return pbNumericScale;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::AppendChunk(VARIANT Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AppendChunk"), DISPID(1107));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetChunk"), DISPID(1108));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field20DispT<T>::GetChunk(long Length/*[in]*/)
{
  VARIANT pvar;
  this->GetChunk(Length, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_OriginalValue(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OriginalValue"), DISPID(1104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field20DispT<T>::get_OriginalValue(void)
{
  VARIANT pvar;
  this->get_OriginalValue((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingValue"), DISPID(1105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field20DispT<T>::get_UnderlyingValue(void)
{
  VARIANT pvar;
  this->get_UnderlyingValue((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_DataFormat(LPUNKNOWN* ppiDF/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataFormat"), DISPID(1115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppiDF /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
Field20DispT<T>::get_DataFormat(void)
{
  LPUNKNOWN ppiDF;
  this->get_DataFormat((LPUNKNOWN*)&ppiDF);
  return ppiDF;
}

template <class T> HRESULT __fastcall
Field20DispT<T>::_set_DataFormat(LPUNKNOWN ppiDF/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataFormat"), DISPID(1115));
  TAutoArgs<1> _args;
  _args[1] = ppiDF /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::set_Precision(unsigned_char pbPrecision/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precision"), DISPID(1112));
  TAutoArgs<1> _args;
  _args[1] = pbPrecision /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::set_NumericScale(unsigned_char pbNumericScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumericScale"), DISPID(1113));
  TAutoArgs<1> _args;
  _args[1] = pbNumericScale /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::set_Type(Ador_tlb::DataTypeEnum pDataType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1102));
  TAutoArgs<1> _args;
  _args[1] = (int)pDataType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::set_DefinedSize(Ador_tlb::ADO_LONGPTR pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefinedSize"), DISPID(1103));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::set_Attributes(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(1114));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field20DispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
Field20DispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  Field
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000569-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
FieldDispT<T>::get_Status(long* pFStatus/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Status"), DISPID(1116));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pFStatus /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldDispT<T>::get_Status(void)
{
  long pFStatus;
  this->get_Status((long*)&pFStatus);
  return pFStatus;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActualSize"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
FieldDispT<T>::get_ActualSize(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_ActualSize((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_Attributes(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(1114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
FieldDispT<T>::get_Attributes(void)
{
  long pl;
  this->get_Attributes((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefinedSize"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
FieldDispT<T>::get_DefinedSize(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_DefinedSize((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
FieldDispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pDataType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::DataTypeEnum __fastcall
FieldDispT<T>::get_Type(void)
{
  Ador_tlb::DataTypeEnum pDataType;
  this->get_Type((Ador_tlb::DataTypeEnum*)&pDataType);
  return pDataType;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_Value(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FieldDispT<T>::get_Value(void)
{
  VARIANT pvar;
  this->get_Value((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::set_Value(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_Precision(unsigned_char* pbPrecision/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precision"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbPrecision /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
FieldDispT<T>::get_Precision(void)
{
  unsigned_char pbPrecision;
  this->get_Precision((unsigned_char*)&pbPrecision);
  return pbPrecision;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumericScale"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbNumericScale /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
FieldDispT<T>::get_NumericScale(void)
{
  unsigned_char pbNumericScale;
  this->get_NumericScale((unsigned_char*)&pbNumericScale);
  return pbNumericScale;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::AppendChunk(VARIANT Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AppendChunk"), DISPID(1107));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetChunk"), DISPID(1108));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
FieldDispT<T>::GetChunk(long Length/*[in]*/)
{
  VARIANT pvar;
  this->GetChunk(Length, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_OriginalValue(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OriginalValue"), DISPID(1104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FieldDispT<T>::get_OriginalValue(void)
{
  VARIANT pvar;
  this->get_OriginalValue((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingValue"), DISPID(1105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
FieldDispT<T>::get_UnderlyingValue(void)
{
  VARIANT pvar;
  this->get_UnderlyingValue((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_DataFormat(LPUNKNOWN* ppiDF/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataFormat"), DISPID(1115));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(ppiDF /*[VT_UNKNOWN:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPUNKNOWN __fastcall
FieldDispT<T>::get_DataFormat(void)
{
  LPUNKNOWN ppiDF;
  this->get_DataFormat((LPUNKNOWN*)&ppiDF);
  return ppiDF;
}

template <class T> HRESULT __fastcall
FieldDispT<T>::_set_DataFormat(LPUNKNOWN ppiDF/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataFormat"), DISPID(1115));
  TAutoArgs<1> _args;
  _args[1] = ppiDF /*[VT_UNKNOWN:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::set_Precision(unsigned_char pbPrecision/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precision"), DISPID(1112));
  TAutoArgs<1> _args;
  _args[1] = pbPrecision /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::set_NumericScale(unsigned_char pbNumericScale/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumericScale"), DISPID(1113));
  TAutoArgs<1> _args;
  _args[1] = pbNumericScale /*[VT_UI1:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::set_Type(Ador_tlb::DataTypeEnum pDataType/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1102));
  TAutoArgs<1> _args;
  _args[1] = (int)pDataType /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::set_DefinedSize(Ador_tlb::ADO_LONGPTR pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefinedSize"), DISPID(1103));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::set_Attributes(long pl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(1114));
  TAutoArgs<1> _args;
  _args[1] = pl /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
FieldDispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
FieldDispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// DispIntf:  Field15
// Flags:     (4560) Hidden Dual NonExtensible OleAutomation Dispatchable
// GUID:      {00000505-0000-0010-8000-00AA006D2EA4}
// *********************************************************************//
template <class T> HRESULT __fastcall
Field15DispT<T>::get_ActualSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ActualSize"), DISPID(1109));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Field15DispT<T>::get_ActualSize(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_ActualSize((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_Attributes(long* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Attributes"), DISPID(1114));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
Field15DispT<T>::get_Attributes(void)
{
  long pl;
  this->get_Attributes((long*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_DefinedSize(Ador_tlb::ADO_LONGPTR* pl/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefinedSize"), DISPID(1103));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pl /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::ADO_LONGPTR __fastcall
Field15DispT<T>::get_DefinedSize(void)
{
  Ador_tlb::ADO_LONGPTR pl;
  this->get_DefinedSize((Ador_tlb::ADO_LONGPTR*)&pl);
  return pl;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_Name(BSTR* pbstr/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Name"), DISPID(1100));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbstr /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
Field15DispT<T>::get_Name(void)
{
  BSTR pbstr;
  this->get_Name((BSTR*)&pbstr);
  return pbstr;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_Type(Ador_tlb::DataTypeEnum* pDataType/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Type"), DISPID(1102));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)pDataType /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::DataTypeEnum __fastcall
Field15DispT<T>::get_Type(void)
{
  Ador_tlb::DataTypeEnum pDataType;
  this->get_Type((Ador_tlb::DataTypeEnum*)&pDataType);
  return pDataType;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_Value(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field15DispT<T>::get_Value(void)
{
  VARIANT pvar;
  this->get_Value((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::set_Value(VARIANT pvar/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Value"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = pvar /*[VT_VARIANT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_Precision(unsigned_char* pbPrecision/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Precision"), DISPID(1112));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbPrecision /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
Field15DispT<T>::get_Precision(void)
{
  unsigned_char pbPrecision;
  this->get_Precision((unsigned_char*)&pbPrecision);
  return pbPrecision;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_NumericScale(unsigned_char* pbNumericScale/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumericScale"), DISPID(1113));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pbNumericScale /*[VT_UI1:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> unsigned_char __fastcall
Field15DispT<T>::get_NumericScale(void)
{
  unsigned_char pbNumericScale;
  this->get_NumericScale((unsigned_char*)&pbNumericScale);
  return pbNumericScale;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::AppendChunk(VARIANT Data/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AppendChunk"), DISPID(1107));
  TAutoArgs<1> _args;
  _args[1] = Data /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
Field15DispT<T>::GetChunk(long Length/*[in]*/, VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetChunk"), DISPID(1108));
  TAutoArgs<1> _args;
  _args[1] = Length /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field15DispT<T>::GetChunk(long Length/*[in]*/)
{
  VARIANT pvar;
  this->GetChunk(Length, (VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_OriginalValue(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OriginalValue"), DISPID(1104));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field15DispT<T>::get_OriginalValue(void)
{
  VARIANT pvar;
  this->get_OriginalValue((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_UnderlyingValue(VARIANT* pvar/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnderlyingValue"), DISPID(1105));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pvar /*[VT_VARIANT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT __fastcall
Field15DispT<T>::get_UnderlyingValue(void)
{
  VARIANT pvar;
  this->get_UnderlyingValue((VARIANT*)&pvar);
  return pvar;
}

template <class T> HRESULT __fastcall
Field15DispT<T>::get_Properties(Ador_tlb::Properties** ppvObject/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Properties"), DISPID(500));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ador_tlb::Properties**)ppvObject /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ador_tlb::Properties* __fastcall
Field15DispT<T>::get_Properties(void)
{
  Ador_tlb::Properties* ppvObject;
  this->get_Properties((Ador_tlb::Properties**)&ppvObject);
  return ppvObject;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Recordset
// Interface: TCOMRecordset15
// *********************************************************************//
typedef TCoClassCreatorT<TCOMRecordset15, Recordset15, &CLSID_Recordset, &IID_Recordset15> CoRecordset;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Ador_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ador_tlb;
#endif

#pragma option pop

#endif // ADOR_TLBH
