// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 6/24/2025 1:44:04 PM from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Github\devpro_emulator_service\BSP-2025\EmulatorService\EmulatorService.tlb (1)
// LIBID: {0C508D1F-AE7B-4F43-B4A9-4D9F5E5CC157}
// LCID: 0
// Helpfile: 
// HelpString: EmulatorService Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
//   (2) v2.8 ADOR, (C:\Program Files (x86)\Common Files\System\ado\msador28.tlb)
// ************************************************************************ //
#ifndef   EmulatorService_TLBH
#define   EmulatorService_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif
#include "ADOR_TLB.h"


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Emulatorservice_tlb
{

// *********************************************************************//
// HelpString: EmulatorService Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_EmulatorService = {0x0C508D1F, 0xAE7B, 0x4F43,{ 0xB4, 0xA9, 0x4D,0x9F, 0x5E, 0x5C,0xC1, 0x57} };
extern "C" const __declspec(selectany) GUID IID_IEmulatorManager = {0x4CA1697A, 0x7FA7, 0x4C5B,{ 0x87, 0x2F, 0xCC,0x30, 0x63, 0xE2,0xD3, 0x09} };
extern "C" const __declspec(selectany) GUID CLSID_EmulatorManager = {0xAF437D67, 0xF885, 0x4646,{ 0xA5, 0x79, 0xE3,0x13, 0xAB, 0xF5,0xBD, 0x2C} };
extern "C" const __declspec(selectany) GUID GUID_ExecResult = {0xF24BAB98, 0xEBBC, 0x4890,{ 0x98, 0xC8, 0x93,0xB2, 0xF8, 0xCF,0x0C, 0x9E} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      ExecResult;
interface DECLSPEC_UUID("{4CA1697A-7FA7-4C5B-872F-CC3063E2D309}") IEmulatorManager;
typedef TComInterface<IEmulatorManager, &IID_IEmulatorManager> IEmulatorManagerPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IEmulatorManager EmulatorManager;
typedef IEmulatorManagerPtr EmulatorManagerPtr;

#define LIBID_OF_EmulatorManager (&LIBID_EmulatorService)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum ExecResult
{
  Success = 0, 
  ServiceNotFound = 1, 
  ParamError = 2, 
  WrongScreen = 3, 
  InputError = 4, 
  ScreenTimeout = 5, 
  EmulatorError = 6, 
  InternalError = 7, 
  DBOperatorError = 8, 
  ScriptError = 9, 
  InitScreenError = 10, 
  BackendServiceDown = 11, 
  BackendSignOnFail = 12, 
  DataNotFound = 13, 
  UserCancel = 99, 
  Unknown = 100
} ExecResult;

// *********************************************************************//
// Interface: IEmulatorManager
// Flags:     (256) OleAutomation
// GUID:      {4CA1697A-7FA7-4C5B-872F-CC3063E2D309}
// *********************************************************************//
interface IEmulatorManager  : public IUnknown
{
public:
  virtual Emulatorservice_tlb::ExecResult STDMETHODCALLTYPE Init(BSTR Params/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE Uninit(void) = 0; // [2]
  virtual Emulatorservice_tlb::ExecResult STDMETHODCALLTYPE ExecService(BSTR ServiceName/*[in]*/, 
                                                                        BSTR ParamsStr/*[in]*/, 
                                                                        BSTR TerminalID/*[in]*/) = 0; // [3]
  virtual int STDMETHODCALLTYPE GetResultRecordsetByIndex(int Index/*[in]*/, 
                                                          Ador_tlb::_Recordset* Recordset/*[in]*/, 
                                                          BSTR* RecordsetName/*[in,out]*/) = 0; // [4]
  virtual int STDMETHODCALLTYPE GetResultCount(void) = 0; // [5]
  virtual BSTR STDMETHODCALLTYPE GetTransactionID(void) = 0; // [6]
  virtual BSTR STDMETHODCALLTYPE GetLatestScreen(void) = 0; // [7]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIEmulatorManager
// Interface: IEmulatorManager
// *********************************************************************//
template <class T /* IEmulatorManager */ >
class TCOMIEmulatorManagerT : public TComInterface<IEmulatorManager>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIEmulatorManagerT() {}
  TCOMIEmulatorManagerT(IEmulatorManager *intf, bool addRef = false) : TComInterface<IEmulatorManager>(intf, addRef) {}
  TCOMIEmulatorManagerT(const TCOMIEmulatorManagerT& src) : TComInterface<IEmulatorManager>(src) {}
  TCOMIEmulatorManagerT& operator=(const TCOMIEmulatorManagerT& src) { Bind(src, true); return *this;}

  Emulatorservice_tlb::ExecResult __fastcall Init(BSTR Params/*[in]*/);
  HRESULT         __fastcall Uninit(void);
  Emulatorservice_tlb::ExecResult __fastcall ExecService(BSTR ServiceName/*[in]*/, 
                                                         BSTR ParamsStr/*[in]*/, 
                                                         BSTR TerminalID/*[in]*/);
  int             __fastcall GetResultRecordsetByIndex(int Index/*[in]*/, 
                                                       Ador_tlb::_Recordset* Recordset/*[in]*/, 
                                                       BSTR* RecordsetName/*[in,out]*/);
  int             __fastcall GetResultCount(void);
  BSTR            __fastcall GetTransactionID(void);
  BSTR            __fastcall GetLatestScreen(void);

};
typedef TCOMIEmulatorManagerT<IEmulatorManager> TCOMIEmulatorManager;

// *********************************************************************//
// SmartIntf: TCOMIEmulatorManager
// Interface: IEmulatorManager
// *********************************************************************//
template <class T> Emulatorservice_tlb::ExecResult __fastcall
TCOMIEmulatorManagerT<T>::Init(BSTR Params/*[in]*/)
{
  return (*this)->Init(Params);
}

template <class T> HRESULT __fastcall
TCOMIEmulatorManagerT<T>::Uninit(void)
{
  return (*this)->Uninit();
}

template <class T> Emulatorservice_tlb::ExecResult __fastcall
TCOMIEmulatorManagerT<T>::ExecService(BSTR ServiceName/*[in]*/, BSTR ParamsStr/*[in]*/, 
                                      BSTR TerminalID/*[in]*/)
{
  return (*this)->ExecService(ServiceName, ParamsStr, TerminalID);
}

template <class T> int __fastcall
TCOMIEmulatorManagerT<T>::GetResultRecordsetByIndex(int Index/*[in]*/, 
                                                    Ador_tlb::_Recordset* Recordset/*[in]*/, 
                                                    BSTR* RecordsetName/*[in,out]*/)
{
  return (*this)->GetResultRecordsetByIndex(Index, Recordset, RecordsetName);
}

template <class T> int __fastcall
TCOMIEmulatorManagerT<T>::GetResultCount(void)
{
  return (*this)->GetResultCount();
}

template <class T> BSTR __fastcall
TCOMIEmulatorManagerT<T>::GetTransactionID(void)
{
  return (*this)->GetTransactionID();
}

template <class T> BSTR __fastcall
TCOMIEmulatorManagerT<T>::GetLatestScreen(void)
{
  return (*this)->GetLatestScreen();
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Emulatorservice_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Emulatorservice_tlb;
#endif

#pragma option pop

#endif // EmulatorService_TLBH
